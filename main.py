#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Anicard Auto - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
–£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
"""

import os
import sys
import json
import subprocess
from pathlib import Path

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("=" * 60)
    print("üéÆ ANICARD AUTO - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
    print("=" * 60)
    print()

def print_menu():
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("üìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
    print()
    print("üîÑ –û–°–ù–û–í–ù–´–ï –¶–ò–ö–õ–´:")
    print("  1. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª (22:01 UTC)")
    print("  2. –¶–∏–∫–ª –∫–∞—Ä—Ç (–∫–∞–∂–¥—ã–µ 4—á 10—Å)")
    print("  3. –û–±–∞ —Ü–∏–∫–ª–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π + –∫–∞—Ä—Ç—ã)")
    print("  4. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)")
    print("  4a. –¢–æ–ª—å–∫–æ —Ü–∏–∫–ª –∫–∞—Ä—Ç (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ)")
    print("  4b. –¢–æ–ª—å–∫–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ)")
    print()
    print("üé¥ –ö–ê–†–¢–´ –ò –ö–û–õ–õ–ï–ö–¶–ò–Ø:")
    print("  5. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç")
    print("  6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º")
    print("  7. –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    print()
    print("üë§ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò:")
    print("  8. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print("  9. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print("  10. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É")
    print("  11. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print()
    print("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ò –£–¢–ò–õ–ò–¢–´:")
    print("  12. –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫")
    print("  13. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
    print("  14. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("  15. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print()
    print("‚ùå –í–´–•–û–î:")
    print("  0. –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print()

def run_script(script_path, args=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Å–∫—Ä–∏–ø—Ç"""
    try:
        cmd = [sys.executable, script_path]
        if args:
            cmd.extend(args)
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def view_rare_cards():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç"""
    print("\nüé¥ –ü–†–û–°–ú–û–¢–† –†–ï–î–ö–ò–• –ö–ê–†–¢")
    print("=" * 40)
    
    cards_folder = Path("accounts/cards")
    if not cards_folder.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    card_files = list(cards_folder.glob("*.json"))
    if not card_files:
        print("üì≠ –†–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    all_cards = []
    
    for card_file in card_files:
        try:
            with open(card_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            account_name = card_file.stem
            
            for rarity, cards in data.items():
                for card in cards:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç—ã
                    rating = card.get('rating', 0)
                    if rating == 0 and rarity == 'adamantine':
                        rating = 101
                    elif rating == 0 and rarity == 'mythic':
                        rating = 99
                    elif rating == 0 and rarity == 'legendary':
                        rating = 87
                    elif rating == 0 and rarity == 'epic':
                        rating = 80
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –ø–æ–ª—è element
                    element = card.get('element', '')
                    element_emoji = "‚ö™"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ element
                    import re
                    emoji_match = re.search(r'([üî•üíßüåçüí®üçÉ‚ö°üßäüí°üåë‚≠êüåü‚ú®üíéüîÆ])', element)
                    if emoji_match:
                        element_emoji = emoji_match.group(1)
                    
                    all_cards.append({
                        'name': card['name'],
                        'rating': rating,
                        'element_emoji': element_emoji,
                        'account': account_name
                    })
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {card_file}: {e}")
    
    if not all_cards:
        print("üì≠ –†–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ —Å–≤–µ—Ä—Ö—É)
    all_cards.sort(key=lambda x: x['rating'], reverse=True)
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    print()
    for card in all_cards:
        print(f"{card['element_emoji']}{card['name']} - {card['rating']} ({card['account']})")
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç: {len(all_cards)}")

def view_accounts():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("\nüë§ –°–ü–ò–°–û–ö –ê–ö–ö–ê–£–ù–¢–û–í")
    print("=" * 40)
    
    try:
        with open("accounts/accounts.json", 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        accounts = data.get("accounts", [])
        if not accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üì± –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        print(f"‚öôÔ∏è Concurrency: {data.get('concurrency', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"ü§ñ –ë–æ—Ç: {data.get('bot', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print()
        
        for i, acc in enumerate(accounts, 1):
            print(f"{i:2d}. {acc['session']} - {acc['phone']}")
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ accounts.json: {e}")


def view_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫"""
    print("\nüìã –õ–û–ì–ò –û–®–ò–ë–û–ö")
    print("=" * 40)
    
    logs_folder = Path("errors")
    if not logs_folder.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    log_files = list(logs_folder.glob("*.ndjson"))
    if not log_files:
        print("üì≠ –õ–æ–≥–æ–≤ –æ—à–∏–±–æ–∫ –Ω–µ—Ç")
        return
    
    for log_file in log_files:
        print(f"\nüìÑ {log_file.name}:")
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(lines)}")
                if lines:
                    print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏:")
                    for line in lines[-3:]:
                        try:
                            log_entry = json.loads(line.strip())
                            print(f"   ‚Ä¢ {log_entry.get('ts', 'N/A')} - {log_entry.get('kind', 'N/A')} - {log_entry.get('detail', 'N/A')}")
                        except:
                            print(f"   ‚Ä¢ {line.strip()[:50]}...")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º accounts.json
    accounts_file = Path("accounts/accounts.json")
    if accounts_file.exists():
        print("‚úÖ accounts.json –Ω–∞–π–¥–µ–Ω")
        try:
            with open(accounts_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"   –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(data.get('accounts', []))}")
            print(f"   Concurrency: {data.get('concurrency', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")
    else:
        print("‚ùå accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –∫–∞—Ä—Ç–∞–º–∏
    cards_folder = Path("accounts/cards")
    if cards_folder.exists():
        card_files = list(cards_folder.glob("*.json"))
        print(f"‚úÖ –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–∞–π–¥–µ–Ω–∞ ({len(card_files)} —Ñ–∞–π–ª–æ–≤)")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    req_file = Path("requirements.txt")
    if req_file.exists():
        print("‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    while True:
        clear_screen()
        print_header()
        print_menu()
        
        try:
            choice = input("üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (0-15, 4a, 4b): ").strip()
            print()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                print("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
                run_script("scripts/run_daily.py")
            elif choice == "2":
                print("üé¥ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç...")
                run_script("scripts/run_cards.py")
            elif choice == "3":
                print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö —Ü–∏–∫–ª–æ–≤...")
                run_script("scripts/run_both.py")
            elif choice == "4":
                print("‚ôæÔ∏è –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
                run_script("scripts/continuous_cycle.py")
            elif choice == "4a":
                print("üé¥ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç...")
                run_script("scripts/continuous_cycle.py", ["cards"])
            elif choice == "4b":
                print("üåÖ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
                run_script("scripts/continuous_cycle.py", ["daily"])
            elif choice == "5":
                view_rare_cards()
            elif choice == "6":
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç...")
                run_script("scripts/card_stats.py")
            elif choice == "7":
                print("üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã...")
                run_script("scripts/card_stats.py")
            elif choice == "8":
                print("üë§ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                run_script("scripts/auth_manager.py")
            elif choice == "9":
                view_accounts()
            elif choice == "10":
                print("üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...")
                run_script("scripts/test_connection.py")
            elif choice == "11":
                print("üéÅ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                run_script("scripts/activate_promo.py")
            elif choice == "12":
                view_logs()
            elif choice == "13":
                print("üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...")
                run_script("scripts/clean_logs.py")
            elif choice == "14":
                check_config()
            elif choice == "15":
                print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
                run_script("pip", ["install", "-r", "requirements.txt"])
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            if choice != "0":
                input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()