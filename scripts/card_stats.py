#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Card Statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–¥–∫–∏–º –∫–∞—Ä—Ç–∞–º
"""

import json
import os
from pathlib import Path
from collections import Counter
from datetime import datetime

def load_cards_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    cards_folder = Path("accounts/cards")
    if not cards_folder.exists():
        return {}
    
    all_cards = {}
    for card_file in cards_folder.glob("*.json"):
        try:
            with open(card_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            all_cards[card_file.stem] = data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {card_file}: {e}")
    
    return all_cards

def print_general_stats(all_cards):
    """–í—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 50)
    
    total_cards = 0
    rarity_counts = Counter()
    account_counts = {}
    
    for account, data in all_cards.items():
        account_total = 0
        for rarity, cards in data.items():
            count = len(cards)
            total_cards += count
            account_total += count
            rarity_counts[rarity] += count
        
        account_counts[account] = account_total
    
    print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∫–∞—Ä—Ç–∞–º–∏: {len(account_counts)}")
    print(f"üé¥ –í—Å–µ–≥–æ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç: {total_cards}")
    print()
    
    print("üìà –ü–û –†–ï–î–ö–û–°–¢–ò:")
    rarity_emojis = {"epic": "üü£", "legendary": "üü°", "mythic": "üî¥", "adamantine": "üíé"}
    for rarity, count in rarity_counts.most_common():
        emoji = rarity_emojis.get(rarity, "‚ö™")
        percentage = (count / total_cards * 100) if total_cards > 0 else 0
        print(f"  {emoji} {rarity.upper()}: {count} –∫–∞—Ä—Ç ({percentage:.1f}%)")
    
    print()
    print("üë§ –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:")
    for account, count in sorted(account_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"  {account}: {count} –∫–∞—Ä—Ç")

def print_account_details(all_cards):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú")
    print("=" * 50)
    
    for account, data in all_cards.items():
        print(f"\nüë§ {account}:")
        
        total = 0
        for rarity, cards in data.items():
            if cards:
                emoji = {"epic": "üü£", "legendary": "üü°", "mythic": "üî¥", "adamantine": "üíé"}.get(rarity, "‚ö™")
                print(f"  {emoji} {rarity.upper()}: {len(cards)} –∫–∞—Ä—Ç")
                total += len(cards)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –∫–∞—Ä—Ç—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                sorted_cards = sorted(cards, key=lambda x: x.get('rating', 0), reverse=True)
                for card in sorted_cards[:3]:
                    print(f"    ‚Ä¢ {card['name']} (–†–µ–π—Ç–∏–Ω–≥: {card['rating']})")
                if len(cards) > 3:
                    print(f"    ... –∏ –µ—â–µ {len(cards) - 3} –∫–∞—Ä—Ç")
        
        print(f"  üìä –í—Å–µ–≥–æ: {total} –∫–∞—Ä—Ç")

def print_rare_cards_list(all_cards, min_rating=90):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç"""
    print(f"\nüíé –°–ê–ú–´–ï –†–ï–î–ö–ò–ï –ö–ê–†–¢–´ (—Ä–µ–π—Ç–∏–Ω–≥ {min_rating}+)")
    print("=" * 50)
    
    rare_cards = []
    for account, data in all_cards.items():
        for rarity, cards in data.items():
            for card in cards:
                if card.get('rating', 0) >= min_rating:
                    rare_cards.append({
                        'account': account,
                        'name': card['name'],
                        'rating': card['rating'],
                        'rarity': rarity,
                        'universe': card.get('universe', ''),
                        'element': card.get('element', '')
                    })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    rare_cards.sort(key=lambda x: x['rating'], reverse=True)
    
    if not rare_cards:
        print(f"üì≠ –ö–∞—Ä—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {min_rating}+ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    rarity_emojis = {"epic": "üü£", "legendary": "üü°", "mythic": "üî¥", "adamantine": "üíé"}
    
    for i, card in enumerate(rare_cards[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20
        emoji = rarity_emojis.get(card['rarity'], "‚ö™")
        print(f"{i:2d}. {emoji} {card['name']} (–†–µ–π—Ç–∏–Ω–≥: {card['rating']}) - {card['account']}")
        if card['universe']:
            print(f"    üåç –í—Å–µ–ª–µ–Ω–Ω–∞—è: {card['universe']}")
        if card['element']:
            print(f"    üçÉ –≠–ª–µ–º–µ–Ω—Ç: {card['element']}")
    
    if len(rare_cards) > 20:
        print(f"\n... –∏ –µ—â–µ {len(rare_cards) - 20} –∫–∞—Ä—Ç")

def search_cards(all_cards, search_term):
    """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    print(f"\nüîç –ü–û–ò–°–ö –ö–ê–†–¢: '{search_term}'")
    print("=" * 50)
    
    found_cards = []
    for account, data in all_cards.items():
        for rarity, cards in data.items():
            for card in cards:
                if search_term.lower() in card['name'].lower():
                    found_cards.append({
                        'account': account,
                        'name': card['name'],
                        'rating': card['rating'],
                        'rarity': rarity,
                        'universe': card.get('universe', ''),
                        'element': card.get('element', '')
                    })
    
    if not found_cards:
        print(f"üì≠ –ö–∞—Ä—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: {len(found_cards)}")
    print()
    
    rarity_emojis = {"epic": "üü£", "legendary": "üü°", "mythic": "üî¥", "adamantine": "üíé"}
    
    for card in found_cards:
        emoji = rarity_emojis.get(card['rarity'], "‚ö™")
        print(f"üé¥ {emoji} {card['name']} (–†–µ–π—Ç–∏–Ω–≥: {card['rating']}) - {card['account']}")
        if card['universe']:
            print(f"   üåç –í—Å–µ–ª–µ–Ω–Ω–∞—è: {card['universe']}")
        if card['element']:
            print(f"   üçÉ –≠–ª–µ–º–µ–Ω—Ç: {card['element']}")
        print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé¥ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–î–ö–ò–• –ö–ê–†–¢")
    print("=" * 50)
    
    all_cards = load_cards_data()
    
    if not all_cards:
        print("‚ùå –ö–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç.")
        return
    
    while True:
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("2. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º")
        print("3. –°–∞–º—ã–µ —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã (90+)")
        print("4. –°–∞–º—ã–µ —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã (100+)")
        print("5. –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            print_general_stats(all_cards)
        elif choice == "2":
            print_account_details(all_cards)
        elif choice == "3":
            print_rare_cards_list(all_cards, 90)
        elif choice == "4":
            print_rare_cards_list(all_cards, 100)
        elif choice == "5":
            search_term = input("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
            if search_term:
                search_cards(all_cards, search_term)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        if choice != "0":
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()

