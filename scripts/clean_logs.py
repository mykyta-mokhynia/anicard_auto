#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Clean Logs - –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
"""

import os
from pathlib import Path
from datetime import datetime, timedelta

def clean_old_logs(days=7):
    """–£–¥–∞–ª—è–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    logs_folder = Path("errors")
    if not logs_folder.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    cutoff_date = datetime.now() - timedelta(days=days)
    deleted_count = 0
    total_size = 0
    
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    print(f"üìÖ –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ –¥–æ: {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    for log_file in logs_folder.glob("*.ndjson"):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            file_time = datetime.fromtimestamp(log_file.stat().st_mtime)
            file_size = log_file.stat().st_size
            
            if file_time < cutoff_date:
                print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º: {log_file.name} ({file_size} –±–∞–π—Ç, {file_time.strftime('%Y-%m-%d %H:%M:%S')})")
                log_file.unlink()
                deleted_count += 1
                total_size += file_size
            else:
                print(f"‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: {log_file.name} ({file_size} –±–∞–π—Ç, {file_time.strftime('%Y-%m-%d %H:%M:%S')})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {log_file.name}: {e}")
    
    print()
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    print(f"   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {total_size} –±–∞–π—Ç ({total_size / 1024:.1f} –ö–ë)")

def show_log_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤"""
    logs_folder = Path("errors")
    if not logs_folder.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í")
    print("=" * 40)
    
    total_files = 0
    total_size = 0
    oldest_file = None
    newest_file = None
    
    for log_file in logs_folder.glob("*.ndjson"):
        try:
            file_time = datetime.fromtimestamp(log_file.stat().st_mtime)
            file_size = log_file.stat().st_size
            
            total_files += 1
            total_size += file_size
            
            if oldest_file is None or file_time < oldest_file[1]:
                oldest_file = (log_file.name, file_time)
            if newest_file is None or file_time > newest_file[1]:
                newest_file = (log_file.name, file_time)
            
            print(f"üìÑ {log_file.name}: {file_size} –±–∞–π—Ç, {file_time.strftime('%Y-%m-%d %H:%M:%S')}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {log_file.name}: {e}")
    
    print()
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç ({total_size / 1024:.1f} –ö–ë)")
    if oldest_file:
        print(f"   –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π: {oldest_file[0]} ({oldest_file[1].strftime('%Y-%m-%d %H:%M:%S')})")
    if newest_file:
        print(f"   –°–∞–º—ã–π –Ω–æ–≤—ã–π: {newest_file[0]} ({newest_file[1].strftime('%Y-%m-%d %H:%M:%S')})")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í")
    print("=" * 30)
    
    while True:
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤")
        print("2. –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π")
        print("3. –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π")
        print("4. –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π")
        print("5. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            show_log_stats()
        elif choice == "2":
            clean_old_logs(3)
        elif choice == "3":
            clean_old_logs(7)
        elif choice == "4":
            clean_old_logs(30)
        elif choice == "5":
            confirm = input("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ª–æ–≥–∏? (yes/no): ").strip().lower()
            if confirm == "yes":
                logs_folder = Path("errors")
                if logs_folder.exists():
                    for log_file in logs_folder.glob("*.ndjson"):
                        try:
                            log_file.unlink()
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {log_file.name}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {log_file.name}: {e}")
                    print("‚úÖ –í—Å–µ –ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã")
                else:
                    print("‚ùå –ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        if choice != "0":
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()

