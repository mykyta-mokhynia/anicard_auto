import asyncio, json, os, random, re, datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError, SessionPasswordNeededError

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ .env
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
MESSAGE_TIMEOUT_MS = int(os.getenv("MESSAGE_TIMEOUT", "700"))  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
MESSAGE_TIMEOUT = MESSAGE_TIMEOUT_MS / 1000.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã (0.7 —Å–µ–∫—É–Ω–¥—ã)
WAIT_TIMEOUT = 10.0  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±–æ—Ç–∞

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞—Ä—Ç –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
CARDS_FOLDER = "accounts/cards"
if not os.path.exists(CARDS_FOLDER):
    os.makedirs(CARDS_FOLDER)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT, regex=None, contains=None):
    """
    –ñ–¥—ë–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç entity (–±–æ—Ç–∞).
    –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ (contains) –∏–ª–∏ regex.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ, –∫–≤–µ—Å—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    loop = asyncio.get_event_loop()
    fut = loop.create_future()
    
    @client.on(events.NewMessage(from_users=entity))
    async def handler(event):
        text = event.raw_text or ""
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if event.message.video:
            print(f"üé• [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        system_messages = [
            "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è",
            "–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞", 
            "–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞",
            "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞",
            "—Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞",
            "–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
        ]
        
        if any(sys_msg.lower() in text.lower() for sys_msg in system_messages):
            print(f"‚ÑπÔ∏è [{client.session.filename}] –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç "–∫–≤–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–º–∏—Å—Å–∏—è")
        quest_keywords = ["–∫–≤–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–º–∏—Å—Å–∏—è", "quest", "mission"]
        if any(keyword in text.lower() for keyword in quest_keywords):
            print(f"üìã [{client.session.filename}] –ö–≤–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (contains and contains.lower() in text.lower()) or \
           (regex and re.search(regex, text, re.I)) or \
           (not contains and not regex):
            if not fut.done():
                fut.set_result(event.message)
    
    try:
        return await asyncio.wait_for(fut, timeout=timeout)
    finally:
        client.remove_event_handler(handler)

async def click_button(msg, *, text=None, regex=None, index=None, case_insensitive=True):
    """
    –ö–ª–∏–∫ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    if not msg or not msg.buttons:
        return False
    
    flat = [b for row in msg.buttons for b in row]
    
    if index is not None:
        if 0 <= index < len(flat):
            await flat[index].click()
            return True
        return False
    
    def norm(s):
        return (s or "") if not case_insensitive else (s or "").lower()
    
    for b in flat:
        bt = b.text or ""
        if text and norm(bt) == norm(text):
            await b.click(); return True
        if regex and re.search(regex, bt, re.I if case_insensitive else 0):
            await b.click(); return True
    return False

async def send_message_and_wait(client, entity, message, timeout=MESSAGE_TIMEOUT):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç
    """
    await client.send_message(entity, message)
    return await wait_new_from(client, entity, timeout=timeout)

async def click_button_and_wait(client, entity, msg, button_text=None, button_index=None, timeout=MESSAGE_TIMEOUT):
    """
    –ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏ –∂–¥–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        if button_text:
            clicked = await click_button(msg, text=button_text)
        elif button_index is not None:
            clicked = await click_button(msg, index=button_index)
        else:
            return None
        
        if clicked:
            await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            try:
                return await wait_new_from(client, entity, timeout=timeout)
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    async for message in client.iter_messages(entity, limit=1):
                        return message
                except:
                    print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return None
        return None
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: {e}")
        return None

def parse_card_response(text, card_type):
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç —Å –∫–∞—Ä—Ç–æ–π –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    try:
        # –ò—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç—ã
        rating_match = re.search(r'(\d+)\s*\|\s*([^|]+)', text)
        if rating_match:
            rating = int(rating_match.group(1))
            name = rating_match.group(2).strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            if rating >= 101:
                rarity = "adamantine"
            elif rating >= 91:
                rarity = "mythic"
            elif rating >= 81:
                rarity = "legendary"
            elif rating >= 76:
                rarity = "epic"
            else:
                rarity = "common"
            
            # –ò—â–µ–º –≤—Å–µ–ª–µ–Ω–Ω—É—é –∏ —ç–ª–µ–º–µ–Ω—Ç
            universe = ""
            element = ""
            
            universe_match = re.search(r'–í—Å–µ–ª–µ–Ω–Ω–∞—è:\s*([^\n]+)', text)
            if universe_match:
                universe = universe_match.group(1).strip()
            
            element_match = re.search(r'–≠–ª–µ–º–µ–Ω—Ç:\s*([^\n]+)', text)
            if element_match:
                element = element_match.group(1).strip()
            
            return {
                "name": name,
                "rating": rating,
                "rarity": rarity,
                "universe": universe,
                "element": element,
                "type": card_type
            }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç—ã: {e}")
    
    return None

def is_rare_card(rating):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ: 80, 87-90, 99-101
    """
    if rating == 101:
        return "adamantine"
    elif rating >= 99 and rating <= 100:
        return "mythic"
    elif rating >= 87 and rating <= 90:
        return "legendary"
    elif rating == 80:
        return "epic"
    else:
        return None

def save_card_to_file(session_name, card_info):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–¥–∫—É—é –∫–∞—Ä—Ç—É –≤ —Ñ–∞–π–ª
    """
    try:
        # –£–±–∏—Ä–∞–µ–º .session –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        clean_name = session_name.replace('.session', '')
        file_path = os.path.join(CARDS_FOLDER, f"{clean_name}.json")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç—ã
        cards = {"legendary": [], "mythic": [], "adamantine": [], "epic": []}
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                cards = json.load(f)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
        rarity = is_rare_card(card_info["rating"])
        if not rarity:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for existing_card in cards[rarity]:
            if existing_card["name"] == card_info["name"]:
                print(f"üîÑ [{session_name}] –ö–∞—Ä—Ç–∞ {card_info['name']} —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
        cards[rarity].append({
            "name": card_info["name"],
            "rating": card_info["rating"],
            "universe": card_info["universe"],
            "element": card_info["element"],
            "type": card_info["type"],
            "rarity": rarity,
            "timestamp": datetime.datetime.now().isoformat()
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(cards, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ [{session_name}] –†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {card_info['name']} ({rarity})")
        
    except Exception as e:
        print(f"‚ùå [{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {e}")

def send_card_notification(session_name, card_info):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–¥–∫–æ–π –∫–∞—Ä—Ç—ã
    """
    rarity_emoji = {
        "epic": "üü£",
        "legendary": "üü°", 
        "mythic": "üî¥",
        "adamantine": "üíé"
    }
    
    emoji = rarity_emoji.get(card_info["rarity"], "‚ö™")
    print(f"üéâ [{session_name}] –ù–û–í–ê–Ø –†–ï–î–ö–ê–Ø –ö–ê–†–¢–ê! {emoji} {card_info['name']} (–†–µ–π—Ç–∏–Ω–≥: {card_info['rating']}, {card_info['rarity']})")

async def use_attempts(client, entity, attempts, card_type):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (timeout, last_card_info)
    """
    command = "‚öîÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É" if card_type == "battle" else "üèµÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É"
    emoji = "‚öîÔ∏è" if card_type == "battle" else "üé≠"
    
    print(f"{emoji} [{client.session.filename}] –ò—Å–ø–æ–ª—å–∑—É–µ–º {attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {card_type} –∫–∞—Ä—Ç...")
    
    last_card_info = None
    
    for i in range(attempts):
        try:
            print(f"{emoji} [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{attempts}...")
            await client.send_message(entity, command)
            await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            
            try:
                reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
                if reply and reply.raw_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
                    if "—Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑" in reply.raw_text.lower():
                        print(f"‚è∞ [{client.session.filename}] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–π–º–∞—É—Ç: {reply.raw_text}")
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞
                        time_match = re.search(r'—á–µ—Ä–µ–∑ (\d+) —á (\d+) –º–∏–Ω', reply.raw_text)
                        if time_match:
                            hours = int(time_match.group(1))
                            minutes = int(time_match.group(2))
                            total_minutes = hours * 60 + minutes + 1  # +1 –º–∏–Ω—É—Ç–∞
                            print(f"‚è∞ [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ {total_minutes} –º–∏–Ω—É—Ç")
                            return (total_minutes, last_card_info)
                        return (240, last_card_info)  # 4 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    card_info = parse_card_response(reply.raw_text, card_type)
                    if card_info:
                        last_card_info = card_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç–µ
                        rarity = is_rare_card(card_info["rating"])
                        if rarity:
                            card_info["rarity"] = rarity
                            save_card_to_file(client.session.filename, card_info)
                            send_card_notification(client.session.filename, card_info)
                            print(f"üéâ [{client.session.filename}] –†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞: {card_info['name']} (–†–µ–π—Ç–∏–Ω–≥: {card_info['rating']})")
                        else:
                            print(f"üìù [{client.session.filename}] –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞: {card_info['name']} (–†–µ–π—Ç–∏–Ω–≥: {card_info['rating']})")
                            
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
            
            if i < attempts - 1:
                await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}: {e}")
    
    return (0, last_card_info)  # –ù–µ—Ç —Ç–∞–π–º–∞—É—Ç–∞

async def set_card_filters(client, entity, card_name, card_type):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ä—Ç
    """
    try:
        print(f"üéõÔ∏è [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è {card_name}...")
        
        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç - –ë–æ–µ–≤—ã–µ ‚öîÔ∏è –∏–ª–∏ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ üé≠
        if card_type == "battle":
            print(f"‚öîÔ∏è [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç: –ë–æ–µ–≤—ã–µ ‚öîÔ∏è")
            await client.send_message(entity, "–ë–æ–µ–≤—ã–µ ‚öîÔ∏è")
        else:
            print(f"üé≠ [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç: –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ üé≠")
            await client.send_message(entity, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ üé≠")
        
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        print(f"üìù [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card_name}")
        await client.send_message(entity, card_name)
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í—Å–µ–ª–µ–Ω–Ω—ã–µ - ‚úñÔ∏è
        print(f"üåç [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í—Å–µ–ª–µ–Ω–Ω—ã–µ: ‚úñÔ∏è")
        await client.send_message(entity, "‚úñÔ∏è")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –†–µ–¥–∫–æ—Å—Ç–∏ - ‚úñÔ∏è
        print(f"‚≠ê [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –†–µ–¥–∫–æ—Å—Ç–∏: ‚úñÔ∏è")
        await client.send_message(entity, "‚úñÔ∏è")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –°—Ç–∏—Ö–∏–∏ - ‚úñÔ∏è
        print(f"üî• [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –°—Ç–∏—Ö–∏–∏: ‚úñÔ∏è")
        await client.send_message(entity, "‚úñÔ∏è")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –°–Ω–∞—á–∞–ª–∞ - –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–ø–µ—Ä—ë–¥
        print(f"üìä [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–ø–µ—Ä—ë–¥")
        await client.send_message(entity, "–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–ø–µ—Ä—ë–¥")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –ü–æ—Ç–æ–º - –ù–æ–≤—ã–µ –≤–ø–µ—Ä—ë–¥
        print(f"üìä [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –ù–æ–≤—ã–µ –≤–ø–µ—Ä—ë–¥")
        await client.send_message(entity, "–ù–æ–≤—ã–µ –≤–ø–µ—Ä—ë–¥")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 8. –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞—Ä—Ç—ã ‚è©"
        if msg and msg.buttons:
            cards_button = None
            for button_text in [b.text for row in msg.buttons for b in row]:
                if "–ö–∞—Ä—Ç—ã ‚è©" in button_text:
                    cards_button = button_text
                    break
            
            if cards_button:
                print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {cards_button}")
                msg = await click_button_and_wait(client, entity, msg, button_text=cards_button)
                
                if msg and "–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç" in msg.raw_text:
                    print(f"‚úÖ [{client.session.filename}] –§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                    return False
            else:
                print(f"‚ÑπÔ∏è [{client.session.filename}] –ö–Ω–æ–ø–∫–∞ '–ö–∞—Ä—Ç—ã ‚è©' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        else:
            print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return False

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ö–ê–†–¢ ===

async def card_cycle_for_account(client, bot_username):
    """
    –¶–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        entity = await client.get_entity(bot_username)
        print(f"üéØ [{client.session.filename}] –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∫–∞—Ä—Ç...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        await asyncio.sleep(random.uniform(0.1, 0.3))

        # 1. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞
        print(f"üöÄ [{client.session.filename}] –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞...")
        await client.send_message(entity, "/start")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ø—ã—Ç–æ–∫
        print(f"üéí [{client.session.filename}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        msg = await send_message_and_wait(client, entity, "üéí –ü—Ä–æ—Ñ–∏–ª—å")
        print(f"‚úÖ [{client.session.filename}] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        
        # –ü–∞—Ä—Å–∏–º –ø–æ–ø—ã—Ç–∫–∏
        profile_text = msg.raw_text
        attempts_match = re.search(r'–ü–æ–ø—ã—Ç–∫–∏:\s*¬∑\s*‚öîÔ∏è\s*-\s*(\d+)\s*\|\s*üé≠\s*-\s*(\d+)', profile_text)
        
        if attempts_match:
            battle_attempts = int(attempts_match.group(1))
            collection_attempts = int(attempts_match.group(2))
            print(f"üìä [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∏: ‚öîÔ∏è {battle_attempts} | üé≠ {collection_attempts}")
        else:
            print(f"‚ÑπÔ∏è [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
            battle_attempts = 0
            collection_attempts = 0
        
        # 2. –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Ç–∏–º –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        last_battle_card = None
        last_collection_card = None
        
        if battle_attempts > 0 or collection_attempts > 0:
            print(f"üéØ [{client.session.filename}] –¢—Ä–∞—Ç–∏–º –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è...")
            
            if battle_attempts > 0:
                timeout, last_battle_card = await use_attempts(client, entity, battle_attempts, "battle")
                if timeout > 0:
                    print(f"‚è∞ [{client.session.filename}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç: {timeout} –º–∏–Ω—É—Ç")
                    return timeout
            
            if collection_attempts > 0:
                timeout, last_collection_card = await use_attempts(client, entity, collection_attempts, "collection")
                if timeout > 0:
                    print(f"‚è∞ [{client.session.filename}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç: {timeout} –º–∏–Ω—É—Ç")
                    return timeout
        
        # 3. –¢—Ä–∞—Ç–∏–º –ø–æ 1 –∫—Ä—É—Ç–∫–µ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
        print(f"üéØ [{client.session.filename}] –¢—Ä–∞—Ç–∏–º –ø–æ 1 –∫—Ä—É—Ç–∫–µ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞...")
        
        # –¢—Ä–∞—Ç–∏–º –±–æ–µ–≤—É—é –∫—Ä—É—Ç–∫—É
        timeout, battle_card = await use_attempts(client, entity, 1, "battle")
        if battle_card:
            last_battle_card = battle_card
        if timeout > 0:
            print(f"‚è∞ [{client.session.filename}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç: {timeout} –º–∏–Ω—É—Ç")
            return timeout
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫—Ä—É—Ç–∫–∞–º–∏
        await asyncio.sleep(MESSAGE_TIMEOUT)
        
        # –¢—Ä–∞—Ç–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é –∫—Ä—É—Ç–∫—É
        timeout, collection_card = await use_attempts(client, entity, 1, "collection")
        if collection_card:
            last_collection_card = collection_card
        if timeout > 0:
            print(f"‚è∞ [{client.session.filename}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç: {timeout} –º–∏–Ω—É—Ç")
            return timeout
        
        # 4. –ò—â–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã)
        rare_cards = []
        if last_battle_card and is_rare_card(last_battle_card["rating"]):
            rare_cards.append(last_battle_card)
        if last_collection_card and is_rare_card(last_collection_card["rating"]):
            rare_cards.append(last_collection_card)
        
        if rare_cards:
            print(f"üéâ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–æ {len(rare_cards)} —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é...")
            
            for card in rare_cards:
                print(f"üîç [{client.session.filename}] –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—É: {card['name']} (–†–µ–π—Ç–∏–Ω–≥: {card['rating']})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ú–æ–∏ –∫–∞—Ä—Ç—ã"
                print(f"üß≥ [{client.session.filename}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º '–ú–æ–∏ –∫–∞—Ä—Ç—ã'...")
                await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                msg = await send_message_and_wait(client, entity, "üß≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã")
                
                if msg and msg.buttons:
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–≤–∞–Ω–∏–µ ‚ûï"
                    cards_button = None
                    for button_text in [b.text for row in msg.buttons for b in row]:
                        if "–ù–∞–∑–≤–∞–Ω–∏–µ ‚ûï" in button_text:
                            cards_button = button_text
                            break
                    
                    if cards_button:
                        print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {cards_button}")
                        msg = await click_button_and_wait(client, entity, msg, button_text=cards_button)
                        
                        if msg and "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã" in msg.raw_text:
                            print(f"üìù [{client.session.filename}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card['name']}")
                            await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                            msg = await send_message_and_wait(client, entity, card['name'])
                            
                            if msg and "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ä—Ç" in msg.raw_text:
                                print(f"üéõÔ∏è [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...")
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ä—Ç—ã
                                success = await set_card_filters(client, entity, card['name'], card['type'])
                                if success:
                                    print(f"‚úÖ [{client.session.filename}] –§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {card['name']}")
                                else:
                                    print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {card['name']}")
                            else:
                                print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                        else:
                            print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã")
                    else:
                        print(f"‚ÑπÔ∏è [{client.session.filename}] –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–≤–∞–Ω–∏–µ ‚ûï' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ '–ú–æ–∏ –∫–∞—Ä—Ç—ã'")
        else:
            print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ—Ç —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        print(f"üéâ [{client.session.filename}] –¶–∏–∫–ª –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return 0  # –ù–µ—Ç —Ç–∞–π–º–∞—É—Ç–∞
        
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∫–∞—Ä—Ç: {e}")
        print(f"üîç [{client.session.filename}] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        print(f"üìã [{client.session.filename}] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return 0

async def run_card_cycle():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∫–∞—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        with open("accounts.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        
        bot_username = config.get("bot", "@anicardplaybot")
        concurrency = config.get("concurrency", 2)
        accounts = config.get("accounts", [])
        
        print(f"üîê –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        print(f"‚ö° –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {concurrency}")
        print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: {MESSAGE_TIMEOUT_MS} –º—Å")
        
        for i, acc in enumerate(accounts, 1):
            print(f"  {i}. {acc['session']} -> {bot_username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        semaphore = asyncio.Semaphore(concurrency)
        
        async def process_account(acc):
            async with semaphore:
                session_name = acc["session"]
                phone = acc.get("phone", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                print(f"üîê [{session_name}] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {phone}...")
                
                client = TelegramClient(session_name, API_ID, API_HASH)
                
                try:
                    await client.start()
                    user = await client.get_me()
                    print(f"‚úÖ [{session_name}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: @{user.username} ({user.phone})")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∫–∞—Ä—Ç
                    timeout = await card_cycle_for_account(client, bot_username)
                    
                    if timeout > 0:
                        print(f"‚è∞ [{session_name}] –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {timeout} –º–∏–Ω—É—Ç")
                    else:
                        print(f"‚úÖ [{session_name}] –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞")
                    
                    return timeout
                    
                except Exception as e:
                    print(f"‚ùå [{session_name}] –û—à–∏–±–∫–∞: {e}")
                    return 0
                finally:
                    await client.disconnect()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        tasks = [process_account(acc) for acc in accounts]
        timeouts = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
        valid_timeouts = [t for t in timeouts if isinstance(t, int) and t >= 0]
        
        print("üéâ –¶–∏–∫–ª –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if valid_timeouts:
            max_timeout = max(valid_timeouts)
            if max_timeout > 0:
                print(f"‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç: {max_timeout} –º–∏–Ω—É—Ç")
                return max_timeout
        
        return 0  # –ù–µ—Ç —Ç–∞–π–º–∞—É—Ç–æ–≤
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç: {e}")
        return 0

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "now":
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
        await run_card_cycle()
    else:
        print("üïê –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥...")
        
        while True:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                timeout_minutes = await run_card_cycle()
                
                if timeout_minutes > 0:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –æ—Ç –±–æ—Ç–∞ + 1 –º–∏–Ω—É—Ç–∞
                    wait_time = timeout_minutes * 60 + 60  # –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã + 1 –º–∏–Ω—É—Ç–∞
                    print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {timeout_minutes} –º–∏–Ω—É—Ç (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º)")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
                    wait_time = 4 * 60 * 60 + 10  # 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
                    print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)")
                
                print(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
                
            except KeyboardInterrupt:
                print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                print("‚è∞ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    asyncio.run(main())
