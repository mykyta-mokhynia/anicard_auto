import asyncio, json, os, random, re, datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError, SessionPasswordNeededError

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ .env
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
MESSAGE_TIMEOUT = int(os.getenv("MESSAGE_TIMEOUT", "30"))

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞—Ä—Ç –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
CARDS_FOLDER = "accounts/cards"
if not os.path.exists(CARDS_FOLDER):
    os.makedirs(CARDS_FOLDER)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT, regex=None, contains=None):
    """
    –ñ–¥—ë–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç entity (–±–æ—Ç–∞).
    –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ (contains) –∏–ª–∏ regex.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ, –∫–≤–µ—Å—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    loop = asyncio.get_event_loop()
    fut = loop.create_future()
    
    @client.on(events.NewMessage(from_users=entity))
    async def handler(event):
        text = event.raw_text or ""
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if event.message.video:
            print(f"üé• [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        system_messages = [
            "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è",
            "–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞", 
            "–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞",
            "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞",
            "—Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞",
            "–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
        ]
        
        if any(sys_msg.lower() in text.lower() for sys_msg in system_messages):
            print(f"‚ÑπÔ∏è [{client.session.filename}] –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç "–∫–≤–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–º–∏—Å—Å–∏—è")
        quest_keywords = ["–∫–≤–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–º–∏—Å—Å–∏—è", "quest", "mission"]
        if any(keyword in text.lower() for keyword in quest_keywords):
            print(f"üìã [{client.session.filename}] –ö–≤–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (contains and contains.lower() in text.lower()) or \
           (regex and re.search(regex, text, re.I)) or \
           (not contains and not regex):
            if not fut.done():
                fut.set_result(event.message)
    
    try:
        return await asyncio.wait_for(fut, timeout=timeout)
    finally:
        client.remove_event_handler(handler)

async def click_button(msg, *, text=None, regex=None, index=None, case_insensitive=True):
    """
    –ö–ª–∏–∫ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:
    - text: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    - regex: —Ä–µ–≥—É–ª—è—Ä–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∏
    - index: –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (0..N-1), —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
    """
    if not msg or not msg.buttons:
        return False

    flat = [b for row in msg.buttons for b in row]

    if index is not None:
        if 0 <= index < len(flat):
            await flat[index].click()
            return True
        return False

    def norm(s): return (s or "") if not case_insensitive else (s or "").lower()
    for b in flat:
        bt = b.text or ""
        if text and norm(bt) == norm(text):
            await b.click(); return True
        if regex and re.search(regex, bt, re.I if case_insensitive else 0):
            await b.click(); return True
    return False

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–†–¢–ê–ú–ò ===

def parse_card_response(text, card_type):
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–µ –∏–ª–∏ None –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ —Ä–µ–¥–∫–∞—è
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ä—Ç
    if card_type == "battle":
        rare_keywords = ["–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", "–ê–¥–∞–º–∞–Ω—Ç–∏–Ω–æ–≤–∞—è"]
    elif card_type == "collection":
        rare_keywords = ["–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"]
    else:
        return None
    
    # –ò—â–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
    rarity = None
    for keyword in rare_keywords:
        if keyword in text:
            rarity = keyword
            break
    
    if not rarity:
        return None
    
    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    card_info = {
        "rarity": rarity,
        "type": card_type,
        "name": "",
        "universe": "",
        "element": "",
        "character": "",
        "timestamp": datetime.datetime.now().isoformat()
    }
    
    # –î–ª—è –±–æ–µ–≤—ã—Ö –∫–∞—Ä—Ç
    if card_type == "battle":
        # –ò—â–µ–º –∏–º—è –∫–∞—Ä—Ç—ã
        name_match = re.search(r'üé¥ –ö–∞—Ä—Ç–∞: (.+)', text)
        if name_match:
            card_info["name"] = name_match.group(1).strip()
        
        # –ò—â–µ–º –≤—Å–µ–ª–µ–Ω–Ω—É—é
        universe_match = re.search(r'üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è: (.+)', text)
        if universe_match:
            card_info["universe"] = universe_match.group(1).strip()
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç
        element_match = re.search(r'–≠–ª–µ–º–µ–Ω—Ç: (.+)', text)
        if element_match:
            card_info["element"] = element_match.group(1).strip()
    
    # –î–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
    elif card_type == "collection":
        # –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_match = re.search(r'üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: (.+)', text)
        if character_match:
            card_info["character"] = character_match.group(1).strip()
    
    return card_info

def save_card_to_file(session_name, card_info):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–æ–π –∫–∞—Ä—Ç–µ –≤ JSON —Ñ–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    file_path = os.path.join(CARDS_FOLDER, f"{session_name}.json")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except:
            data = {"legendary": [], "mythic": [], "adamantine": []}
    else:
        data = {"legendary": [], "mythic": [], "adamantine": []}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity = card_info["rarity"]
    if rarity == "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è":
        category = "legendary"
    elif rarity == "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è":
        category = "mythic"
    elif rarity == "–ê–¥–∞–º–∞–Ω—Ç–∏–Ω–æ–≤–∞—è":
        category = "adamantine"
    else:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    card_entry = {"name": card_info["name"] or card_info["character"]}
    if card_info["universe"]:
        card_entry["universe"] = card_info["universe"]
    if card_info["element"]:
        card_entry["element"] = card_info["element"]
    if card_info["character"]:
        card_entry["character"] = card_info["character"]
    
    data[category].append(card_entry)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def send_card_notification(session_name, card_info):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–¥–∫–æ–π –∫–∞—Ä—Ç—ã
    """
    rarity_emoji = {
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": "üåü",
        "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": "‚ú®", 
        "–ê–¥–∞–º–∞–Ω—Ç–∏–Ω–æ–≤–∞—è": "üíé"
    }
    
    type_emoji = {
        "battle": "‚öîÔ∏è",
        "collection": "üé≠"
    }
    
    emoji = rarity_emoji.get(card_info["rarity"], "üé¥")
    type_icon = type_emoji.get(card_info["type"], "üé¥")
    
    print(f"\nüéâ {emoji} –†–ï–î–ö–ê–Ø –ö–ê–†–¢–ê! {emoji}")
    print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {session_name}")
    print(f"üîÆ –†–µ–¥–∫–æ—Å—Ç—å: {card_info['rarity']} {emoji}")
    print(f"üìã –¢–∏–ø: {type_icon} {'–ë–æ–µ–≤–∞—è' if card_info['type'] == 'battle' else '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è'}")
    
    if card_info["name"]:
        print(f"üé¥ –ö–∞—Ä—Ç–∞: {card_info['name']}")
    if card_info["character"]:
        print(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {card_info['character']}")
    if card_info["universe"]:
        print(f"üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è: {card_info['universe']}")
    if card_info["element"]:
        print(f"üçÉ –≠–ª–µ–º–µ–Ω—Ç: {card_info['element']}")
    
    print("=" * 50)

async def get_current_accounts():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ accounts.json
    """
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)
        return cfg.get("accounts", [])
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return []

async def use_battle_attempts(client, entity, attempts):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–µ–≤—ã—Ö –∫–∞—Ä—Ç
    """
    print(f"‚öîÔ∏è [{client.session.filename}] –ò—Å–ø–æ–ª—å–∑—É–µ–º {attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–µ–≤—ã—Ö –∫–∞—Ä—Ç...")
    
    for i in range(attempts):
        try:
            print(f"‚öîÔ∏è [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{attempts}...")
            await client.send_message(entity, "‚öîÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            try:
                reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
                if reply and reply.raw_text:
                    # –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç—É
                    card_info = parse_card_response(reply.raw_text, "battle")
                    if card_info:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                        save_card_to_file(client.session.filename, card_info)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        send_card_notification(client.session.filename, card_info)
                    else:
                        print(f"üìù [{client.session.filename}] –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
                            
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if i < attempts - 1:
                await asyncio.sleep(MESSAGE_TIMEOUT)
                
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}: {e}")

async def use_collection_attempts(client, entity, attempts):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
    """
    print(f"üé≠ [{client.session.filename}] –ò—Å–ø–æ–ª—å–∑—É–µ–º {attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç...")
    
    for i in range(attempts):
        try:
            print(f"üé≠ [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{attempts}...")
            await client.send_message(entity, "üèµÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            try:
                reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
                if reply and reply.raw_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ª–∏ –∫–∞—Ä—Ç–∞
                    if "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞" in reply.raw_text.lower():
                        print(f"üîÑ [{client.session.filename}] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
                    else:
                        # –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç—É
                        card_info = parse_card_response(reply.raw_text, "collection")
                        if card_info:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                        save_card_to_file(client.session.filename, card_info)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        send_card_notification(client.session.filename, card_info)
                    else:
                        print(f"üìù [{client.session.filename}] –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
                            
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if i < attempts - 1:
                await asyncio.sleep(MESSAGE_TIMEOUT)
                
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}: {e}")

# === –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –û–î–ù–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê ===

async def run_daily_rewards(client, bot_username):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:
    1) –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
    2) –ü–µ—Ä–µ–π—Ç–∏ –≤ "‚õ© –î–∞—Ä—ã –±–æ–≥–æ–≤" (4-—è –∫–Ω–æ–ø–∫–∞)
    3) –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏:
       - üÄÑÔ∏è –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω (3-—è –∫–Ω–æ–ø–∫–∞) - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
       - üé≤ –î—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏ (1-—è –∫–Ω–æ–ø–∫–∞) - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
       - üìØ –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ (2-—è –∫–Ω–æ–ø–∫–∞) - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
    """
    try:
        entity = await client.get_entity(bot_username)
        
        print(f"üéØ [{client.session.filename}] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...")

        # 1) –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        try:
            await client.send_message(entity, "üìú –ú–µ–Ω—é")
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"üìã [{client.session.filename}] –ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é: {e}")
            return False
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –ø–æ–¥–º–µ–Ω—é
        print(f"‚è±Ô∏è [{client.session.filename}] –ñ–¥–µ–º {MESSAGE_TIMEOUT} —Å–µ–∫...")
        await asyncio.sleep(MESSAGE_TIMEOUT)

        # 2) –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ "–î–∞—Ä—ã –±–æ–≥–æ–≤" (4-—è –∫–Ω–æ–ø–∫–∞)
        try:
            print(f"üîç [{client.session.filename}] –ò—â–µ–º –∫–Ω–æ–ø–∫—É '–î–∞—Ä—ã –±–æ–≥–æ–≤'...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if msg.buttons:
                button_texts = [b.text for row in msg.buttons for b in row]
                print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
            
            clicked = await click_button(msg, text="‚õ© –î–∞—Ä—ã –±–æ–≥–æ–≤")
            print(f"üîç [{client.session.filename}] –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {clicked}")
            
            if not clicked:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–±—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É (4-—è –∫–Ω–æ–ø–∫–∞ = –∏–Ω–¥–µ–∫—Å 3)
                print(f"üîç [{client.session.filename}] –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É 3...")
                clicked = await click_button(msg, index=3)
                print(f"üîç [{client.session.filename}] –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É: {clicked}")
            
            if not clicked:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–î–∞—Ä—ã –±–æ–≥–æ–≤'")
                return False
            
            print(f"üéÅ [{client.session.filename}] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ '–î–∞—Ä—ã –±–æ–≥–æ–≤'")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç)
            try:
                msg = await wait_new_from(client, entity, timeout=10)  # 10 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ MESSAGE_TIMEOUT
                print(f"‚úÖ [{client.session.filename}] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ '–î–∞—Ä—ã –±–æ–≥–æ–≤'")
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ '–î–∞—Ä—ã –±–æ–≥–æ–≤', –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    async for message in client.iter_messages(entity, limit=1):
                        msg = message
                        print(f"üì± [{client.session.filename}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        break
                except:
                    print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return False
            
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ '–î–∞—Ä—ã –±–æ–≥–æ–≤': {e}")
            return False
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä–∞–¥
        print(f"‚è±Ô∏è [{client.session.filename}] –ñ–¥–µ–º {MESSAGE_TIMEOUT} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä–∞–¥...")
        await asyncio.sleep(MESSAGE_TIMEOUT)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –ö–Ω–æ–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥: {button_texts}")

        # 3) –ü–æ–ª—É—á–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω (3-—è –∫–Ω–æ–ø–∫–∞, –∏–Ω–¥–µ–∫—Å 2) - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        try:
            print(f"üÄÑÔ∏è [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω...")
            await click_button(msg, index=2)
            
            # –ñ–¥–µ–º –ª—é–±–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç)
            try:
                print(f"‚è≥ [{client.session.filename}] –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞...")
                reply = await wait_new_from(client, entity, timeout=15)
                print(f"üì± [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {reply.raw_text[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
                if "—Å–µ–Ω—Ç" in reply.raw_text or "2025" in reply.raw_text or "–¥–æ—Å—Ç—É–ø–Ω" in reply.raw_text.lower():
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –º–µ–Ω—é
                elif reply.buttons:
                    msg = reply
                    button_texts = [b.text for row in msg.buttons for b in row]
                    print(f"‚úÖ [{client.session.filename}] –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω –ø–æ–ª—É—á–µ–Ω! –ù–æ–≤–æ–µ –º–µ–Ω—é: {button_texts}")
                else:
                    print(f"‚úÖ [{client.session.filename}] –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω –ø–æ–ª—É—á–µ–Ω! (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)")
                    
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∂–µ—Ç–æ–Ω–∞")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    async for message in client.iter_messages(entity, limit=1):
                        if message.buttons:
                            msg = message
                            print(f"üì± [{client.session.filename}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
                        break
                except:
                    print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∂–µ—Ç–æ–Ω–∞: {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        print(f"‚è±Ô∏è [{client.session.filename}] –ñ–¥–µ–º {MESSAGE_TIMEOUT} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π...")
        await asyncio.sleep(MESSAGE_TIMEOUT)

        # 4) –ü–æ–ª—É—á–∞–µ–º –¥—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏ (1-—è –∫–Ω–æ–ø–∫–∞, –∏–Ω–¥–µ–∫—Å 0) - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
        try:
            print(f"üé≤ [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º –¥—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏...")
            await click_button(msg, index=0)
            
            try:
                reply = await wait_new_from(client, entity, timeout=10)
                print(f"üì± [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {reply.raw_text[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
                if "—Å–µ–Ω—Ç" in reply.raw_text or "2025" in reply.raw_text or "–¥–æ—Å—Ç—É–ø–Ω" in reply.raw_text.lower():
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –º–µ–Ω—é
                elif reply.buttons:
                    msg = reply
                    button_texts = [b.text for row in msg.buttons for b in row]
                    print(f"‚úÖ [{client.session.filename}] –î—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω! –ù–æ–≤–æ–µ –º–µ–Ω—é: {button_texts}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫—Ä—É—Ç–æ–∫
                    attempts_match = re.search(r'–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ‚öîÔ∏è (\d+) –ø–æ–ø—ã—Ç–æ–∫', reply.raw_text)
                    if attempts_match:
                        battle_attempts = int(attempts_match.group(1))
                        print(f"üéØ [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω–æ {battle_attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–µ–≤—ã—Ö –∫–∞—Ä—Ç!")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—ã—Ç–∫–∏
                        await use_battle_attempts(client, entity, battle_attempts)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                    collection_attempts_match = re.search(r'–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ üé≠ (\d+) –ø–æ–ø—ã—Ç–æ–∫', reply.raw_text)
                    if collection_attempts_match:
                        collection_attempts = int(collection_attempts_match.group(1))
                        print(f"üéØ [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω–æ {collection_attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç!")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—ã—Ç–∫–∏
                        await use_collection_attempts(client, entity, collection_attempts)
                        
                else:
                    print(f"‚úÖ [{client.session.filename}] –î—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω! (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)")
                    
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –∫—É–±–∞ —É–¥–∞—á–∏")
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –∫—É–±–∞ —É–¥–∞—á–∏: {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        print(f"‚è±Ô∏è [{client.session.filename}] –ñ–¥–µ–º {MESSAGE_TIMEOUT} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π...")
        await asyncio.sleep(MESSAGE_TIMEOUT)

        # 5) –ü–æ–ª—É—á–∞–µ–º —Ä–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ (2-—è –∫–Ω–æ–ø–∫–∞, –∏–Ω–¥–µ–∫—Å 1) - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
        try:
            print(f"üìØ [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º —Ä–æ–≥ –ø—Ä–∏–∑—ã–≤–∞...")
            await click_button(msg, index=1)
            
            try:
                reply = await wait_new_from(client, entity, timeout=10)
                print(f"üì± [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {reply.raw_text[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
                if "—Å–µ–Ω—Ç" in reply.raw_text or "2025" in reply.raw_text or "–¥–æ—Å—Ç—É–ø–Ω" in reply.raw_text.lower():
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –º–µ–Ω—é
                elif reply.buttons:
                    msg = reply
                    button_texts = [b.text for row in msg.buttons for b in row]
                    print(f"‚úÖ [{client.session.filename}] –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ –ø–æ–ª—É—á–µ–Ω! –ù–æ–≤–æ–µ –º–µ–Ω—é: {button_texts}")
                else:
                    print(f"‚úÖ [{client.session.filename}] –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ –ø–æ–ª—É—á–µ–Ω! (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)")
                    
                    # –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ –≤—Å–µ–≥–¥–∞ –¥–∞–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
                    card_info = parse_card_response(reply.raw_text, "collection")
                    if card_info:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞–∫ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é
                        card_info["rarity"] = "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"
                        card_info["type"] = "collection"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                        save_card_to_file(client.session.filename, card_info)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        send_card_notification(client.session.filename, card_info)
                    else:
                        print(f"üìù [{client.session.filename}] –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç —Ä–æ–≥–∞ –ø—Ä–∏–∑—ã–≤–∞")
                    
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–≥–∞ –ø—Ä–∏–∑—ã–≤–∞")
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–≥–∞ –ø—Ä–∏–∑—ã–≤–∞: {e}")

        print(f"üéâ [{client.session.filename}] –í—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –≤ run_daily_rewards: {e}")
        return False

async def get_cards(client, bot_username, card_type="both", count=1):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:
    - card_type: "collection" (üèµÔ∏è), "battle" (‚öîÔ∏è), "both" (–æ–±–µ)
    - count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    """
    try:
        entity = await client.get_entity(bot_username)
        
        print(f"üé¥ [{client.session.filename}] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç...")
        print(f"üìä [{client.session.filename}] –¢–∏–ø: {card_type}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        card_commands = []
        if card_type in ["collection", "both"]:
            for _ in range(count):
                card_commands.append("üèµÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
        if card_type in ["battle", "both"]:
            for _ in range(count):
                card_commands.append("‚öîÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
        
        for i, command in enumerate(card_commands):
            try:
                print(f"üé¥ [{client.session.filename}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {command}")
                await client.send_message(entity, command)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (0.7 —Å–µ–∫—É–Ω–¥—ã)
                if i < len(card_commands) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
                    print(f"‚è±Ô∏è [{client.session.filename}] –ñ–¥–µ–º {MESSAGE_TIMEOUT} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π...")
                    await asyncio.sleep(MESSAGE_TIMEOUT)
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                try:
                    reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
                    print(f"‚úÖ [{client.session.filename}] –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: {command}")
                    
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç
                    if reply and reply.raw_text:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ª–∏ –∫–∞—Ä—Ç–∞
                        if "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞" in reply.raw_text.lower():
                            print(f"üîÑ [{client.session.filename}] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞: {command}")
                        else:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ
                            current_card_type = "battle" if "‚öîÔ∏è" in command else "collection"
                            
                            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                            card_info = parse_card_response(reply.raw_text, current_card_type)
                            if card_info:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                                save_card_to_file(client.session.filename, card_info)
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                send_card_notification(client.session.filename, card_info)
                            else:
                                print(f"üìù [{client.session.filename}] –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞: {command}")
                            
                except asyncio.TimeoutError:
                    print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {command}")
                    
            except Exception as e:
                print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {command}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
                continue

        print(f"üéâ [{client.session.filename}] –í—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –≤ get_cards: {e}")
        return False

async def run_combined_tasks(client, bot_username):
    """
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫: –∫–∞—Ä—Ç—ã + –Ω–∞–≥—Ä–∞–¥—ã
    1) –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 0.7 —Å–µ–∫ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏)
    2) –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∏–∑ –¥–∞—Ä–æ–≤ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 0.7 —Å–µ–∫ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏)
    """
    try:
        print(f"üöÄ [{client.session.filename}] –ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        # 1) –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã
        print(f"üé¥ [{client.session.filename}] === –≠–¢–ê–ü 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–†–¢ ===")
        cards_success = await get_cards(client, bot_username, "both", 1)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
        print(f"‚è±Ô∏è [{client.session.filename}] –ñ–¥–µ–º {MESSAGE_TIMEOUT} —Å–µ–∫ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏...")
        await asyncio.sleep(MESSAGE_TIMEOUT)
        
        # 2) –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        print(f"üéÅ [{client.session.filename}] === –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–ì–†–ê–î ===")
        rewards_success = await run_daily_rewards(client, bot_username)
        
        if cards_success and rewards_success:
            print(f"üéâ [{client.session.filename}] –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ö†Ô∏è [{client.session.filename}] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –≤ run_combined_tasks: {e}")
        return False

async def run_continuous_loop(selected_accounts=None):
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª: –Ω–∞–≥—Ä–∞–¥—ã + –∫–∞—Ä—Ç—ã
    """
    print("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    print("‚è∞ –ù–∞–≥—Ä–∞–¥—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞")
    print("üé¥ –ö–∞—Ä—Ç—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 1 –º–∏–Ω—É—Ç—É")
    print("üë• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            current_accounts = await get_current_accounts()
            if selected_accounts is None:
                selected_accounts = current_accounts
                print(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(current_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä–∞–¥
            new_accounts = await get_current_accounts()
            if len(new_accounts) > len(selected_accounts):
                new_count = len(new_accounts) - len(selected_accounts)
                print(f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
                existing_sessions = [acc["session"] for acc in selected_accounts]
                for new_acc in new_accounts:
                    if new_acc["session"] not in existing_sessions:
                        print(f"   ‚ûï {new_acc['session']} ({new_acc.get('phone', 'N/A')})")
                
                selected_accounts = new_accounts
                print(f"üë• –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã (—Ç–æ–ª—å–∫–æ –≤ 22:01 UTC)
            print("üéÅ === –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–ì–†–ê–î ===")
            await run_scenario_for_selected_accounts(run_daily_rewards, selected_accounts)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ü–∏–∫–ª–æ–º –∫–∞—Ä—Ç
                new_accounts = await get_current_accounts()
                if len(new_accounts) > len(selected_accounts):
                    new_count = len(new_accounts) - len(selected_accounts)
                    print(f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
                    existing_sessions = [acc["session"] for acc in selected_accounts]
                    for new_acc in new_accounts:
                        if new_acc["session"] not in existing_sessions:
                            print(f"   ‚ûï {new_acc['session']} ({new_acc.get('phone', 'N/A')})")
                    
                    selected_accounts = new_accounts
                    print(f"üë• –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}")
                
                print("üé¥ === –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–†–¢ ===")
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è get_cards —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                async def get_cards_wrapper(client, bot_username):
                    return await get_cards(client, bot_username, "both", 1)
                await run_scenario_for_selected_accounts(get_cards_wrapper, selected_accounts)
                
                # –ñ–¥–µ–º 4 —á–∞—Å–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
                print("‚è∞ –ñ–¥–µ–º 4 —á–∞—Å–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç...")
                await wait_until_cards_time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã (22:01 UTC)
                import pytz
                utc_now = datetime.datetime.now(pytz.UTC)
                if utc_now.hour == 22 and utc_now.minute >= 1:
                    print("‚è∞ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–≥—Ä–∞–¥–∞–º...")
                    break
            
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            print("‚è∞ –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
            await asyncio.sleep(300)

async def show_cards_statistics(selected_accounts=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç (–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ + –±–æ–µ–≤—ã–µ) —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "üéí –ü—Ä–æ—Ñ–∏–ª—å"
    """
    print("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç...")
    
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)
        
        api_id = API_ID
        api_hash = API_HASH
        bot = cfg.get("bot", "@YourTargetBot")
        
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –±–µ—Ä–µ–º –≤—Å–µ
        if selected_accounts is None:
            accounts = cfg["accounts"]
        else:
            accounts = selected_accounts
        
        if not accounts:
            print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:")
        print("=" * 60)
        
        for acc in accounts:
            client = TelegramClient(acc["session"], api_id, api_hash)
            try:
                await client.start(phone=acc.get("phone"))
                entity = await client.get_entity(acc.get("bot", bot))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                print(f"üîç [{acc['session']}] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
                await client.send_message(entity, "üéí –ü—Ä–æ—Ñ–∏–ª—å")
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
                try:
                    profile_msg = await wait_new_from(client, entity, timeout=10)
                    profile_text = profile_msg.raw_text
                    
                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                    collection_cards = 0
                    battle_cards = 0
                    anicoin = 0
                    tokens = 0
                    battlecoin = 0
                    battle_attempts = 0
                    collection_attempts = 0
                    
                    # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —Å—Ç—Ä–æ–∫–µ "–ö–∞—Ä—Ç—ã"
                    cards_match = re.search(r'–ö–∞—Ä—Ç—ã\s*¬∑\s*‚öîÔ∏è\s*-\s*(\d+)\s*\|\s*üé≠\s*-\s*(\d+)', profile_text)
                    if cards_match:
                        battle_cards = int(cards_match.group(1))
                        collection_cards = int(cards_match.group(2))
                    
                    # –ò—â–µ–º –±–∞–ª–∞–Ω—Å
                    balance_match = re.search(r'–ë–∞–ª–∞–Ω—Å:\s*¬∑\s*ü™ô\s*Anicoin\s*-\s*(\d+)\s*¬∑\s*üÄÑÔ∏è\s*–ñ–µ—Ç–æ–Ω—ã\s*-\s*(\d+)\s*¬∑\s*üéñ\s*BattleCoin\s*-\s*(\d+)', profile_text)
                    if balance_match:
                        anicoin = int(balance_match.group(1))
                        tokens = int(balance_match.group(2))
                        battlecoin = int(balance_match.group(3))
                    
                    # –ò—â–µ–º –ø–æ–ø—ã—Ç–∫–∏
                    attempts_match = re.search(r'–ü–æ–ø—ã—Ç–∫–∏:\s*¬∑\s*‚öîÔ∏è\s*-\s*(\d+)\s*\|\s*üé≠\s*-\s*(\d+)', profile_text)
                    if attempts_match:
                        battle_attempts = int(attempts_match.group(1))
                        collection_attempts = int(attempts_match.group(2))
                    
                    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    print(f"üë§ [{acc['session']}] ({acc.get('phone', 'N/A')})")
                    print(f"   ‚öîÔ∏è –ë–æ–µ–≤—ã–µ –∫–∞—Ä—Ç—ã: {battle_cards}")
                    print(f"   üé≠ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: {collection_cards}")
                    print(f"   ü™ô Anicoin: {anicoin}")
                    print(f"   üÄÑÔ∏è –ñ–µ—Ç–æ–Ω—ã: {tokens}")
                    print(f"   üéñ BattleCoin: {battlecoin}")
                    print(f"   üîÑ –ü–æ–ø—ã—Ç–∫–∏: ‚öîÔ∏è {battle_attempts} | üé≠ {collection_attempts}")
                    print()
                    
                except asyncio.TimeoutError:
                    print(f"‚ö†Ô∏è [{acc['session']}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                except Exception as e:
                    print(f"‚ùå [{acc['session']}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
                
            except Exception as e:
                print(f"‚ùå [{acc['session']}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            finally:
                await client.disconnect()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def show_rare_cards(selected_accounts=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    print("üé¥ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç...")
    
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)
        
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –±–µ—Ä–µ–º –≤—Å–µ
        if selected_accounts is None:
            accounts = cfg["accounts"]
        else:
            accounts = selected_accounts
        
        if not accounts:
            print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return
        
        print("\nüé¥ –†–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:")
        print("=" * 60)
        
        for acc in accounts:
            session_name = acc["session"]
            file_path = os.path.join(CARDS_FOLDER, f"{session_name}.json")
            
            print(f"\nüë§ [{session_name}] ({acc.get('phone', 'N/A')})")
            
            if not os.path.exists(file_path):
                print("   üìù –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç")
                continue
            
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for category, cards in data.items():
                    if not cards:
                        continue
                    
                    category_name = {
                        "legendary": "üåü –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ",
                        "mythic": "‚ú® –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ", 
                        "adamantine": "üíé –ê–¥–∞–º–∞–Ω—Ç–∏–Ω–æ–≤—ã–µ"
                    }.get(category, category)
                    
                    print(f"   {category_name}: {len(cards)}")
                    for card in cards:
                        name = card.get("name", card.get("character", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                        print(f"      ‚Ä¢ {name}")
                        if card.get("universe"):
                            print(f"        üîÆ {card['universe']}")
                        if card.get("element"):
                            print(f"        üçÉ {card['element']}")
                        if card.get("character") and card.get("name"):
                            print(f"        üë§ {card['character']}")
                
                if not any(data.values()):
                    print("   üìù –ù–µ—Ç —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ò ===

async def wait_until_time(target_hour=22, target_minute=1):
    """
    –ñ–¥–µ–º –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ UTC (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22:01 UTC)
    """
    import pytz
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    utc_now = datetime.datetime.now(pytz.UTC)
    target_time_utc = utc_now.replace(hour=target_hour, minute=target_minute, second=0, microsecond=0)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –∂–¥–µ–º –¥–æ –∑–∞–≤—Ç—Ä–∞
    if utc_now >= target_time_utc:
        target_time_utc += datetime.timedelta(days=1)
    
    wait_seconds = (target_time_utc - utc_now).total_seconds()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    local_tz = datetime.datetime.now().astimezone().tzinfo
    target_local = target_time_utc.astimezone(local_tz)
    
    print(f"‚è∞ –ñ–¥–µ–º –¥–æ {target_time_utc.strftime('%H:%M UTC')} ({target_local.strftime('%H:%M –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')})")
    print(f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ ({wait_seconds/3600:.1f} —á–∞—Å–æ–≤)")
    
    await asyncio.sleep(wait_seconds)
    print("‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥...")

async def wait_until_cards_time():
    """
    –ñ–¥–µ–º 4 —á–∞—Å–∞ –∏ 1 –º–∏–Ω—É—Ç—É —Å –º–æ–º–µ–Ω—Ç–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    import pytz
    
    utc_now = datetime.datetime.now(pytz.UTC)
    
    # –î–æ–±–∞–≤–ª—è–µ–º 4 —á–∞—Å–∞ –∏ 1 –º–∏–Ω—É—Ç—É –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    target_time_utc = utc_now + datetime.timedelta(hours=4, minutes=1)
    
    wait_seconds = (target_time_utc - utc_now).total_seconds()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    local_tz = datetime.datetime.now().astimezone().tzinfo
    target_local = target_time_utc.astimezone(local_tz)
    
    print(f"‚è∞ –ñ–¥–µ–º –¥–æ {target_time_utc.strftime('%H:%M UTC')} ({target_local.strftime('%H:%M –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')})")
    print(f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ ({wait_seconds/3600:.1f} —á–∞—Å–æ–≤)")
    
    await asyncio.sleep(wait_seconds)
    print("‚è∞ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –ø—Ä–∏—à–ª–æ! –ó–∞–ø—É—Å–∫–∞–µ–º...")

# === –†–ê–ë–û–¢–ù–ò–ö –ù–ê –û–î–ò–ù –ê–ö–ö–ê–£–ù–¢ ===

async def worker(acc, api_id, api_hash, bot, sema, scenario_func):
    """
    –†–∞–±–æ—Ç–Ω–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency
    """
    session = acc["session"]
    phone = acc.get("phone")
    
    client = TelegramClient(session, api_id, api_hash)

    async with sema:   # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        async with client:
            try:
                print(f"üîê [{session}] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {phone}...")
                
                # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–ø—Ä–æ—Å–∏—Ç –∫–æ–¥/2FA; –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .session
                await client.start(phone=phone)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    me = await client.get_me()
                    user_info = f"@{me.username}" if me.username else f"{me.first_name or ''} {me.last_name or ''}".strip()
                    if not user_info:
                        user_info = f"ID: {me.id}"
                    print(f"‚úÖ [{session}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {user_info} ({phone})")
                except:
                    print(f"‚úÖ [{session}] –ü–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ ({phone})")
                
                # —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                await asyncio.sleep(random.uniform(1.0, 3.0))
                
                # –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                result = await scenario_func(client, acc.get("bot", bot))
                
                # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –≤—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç
                await asyncio.sleep(random.uniform(0.5, 1.5))
                
                return result
                
            except SessionPasswordNeededError:
                print(f"‚ùå [{session}] –ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è {phone} ‚Äî –≤–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
                return False
            except FloodWaitError as e:
                print(f"‚è∞ [{session}] FloodWait –¥–ª—è {phone}: –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫.")
                return False
            except Exception as e:
                print(f"‚ùå [{session}] –û—à–∏–±–∫–∞ –¥–ª—è {phone}: {e}")
                return False

# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def run_scenario_for_all_accounts(scenario_func):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency
    """
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)

        # API –∫–ª—é—á–∏ –±–µ—Ä–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
        api_id = API_ID
        api_hash = API_HASH
        bot = cfg.get("bot", "@YourTargetBot")
        concurrency = int(cfg.get("concurrency", 2))  # –º–∞–∫—Å–∏–º—É–º 2 –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        accounts = cfg["accounts"]

        print(f"üîê –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        print(f"‚ö° –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {concurrency}")
        for i, acc in enumerate(accounts, 1):
            print(f"  {i}. {acc['session']} -> {acc.get('bot', bot)}")
        print()

        sema = asyncio.Semaphore(concurrency)
        tasks = [worker(acc, api_id, api_hash, bot, sema, scenario_func) for acc in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success_count = sum(1 for r in results if r is True)
        print(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return success_count > 0
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª accounts.json –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ README.md")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def run_cards_loop():
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –∏ 1 –º–∏–Ω—É—Ç—É –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    print("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç...")
    print("‚è∞ –ö–∞—Ä—Ç—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –∏ 1 –º–∏–Ω—É—Ç—É")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            await run_scenario_for_all_accounts(get_cards)
            
            # –ñ–¥–µ–º 4 —á–∞—Å–∞ –∏ 1 –º–∏–Ω—É—Ç—É
            print("‚è∞ –ñ–¥–µ–º 4 —á–∞—Å–∞ –∏ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç...")
            await wait_until_cards_time()
            
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∫–∞—Ä—Ç: {e}")
            print("‚è∞ –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

def show_time_info():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    """
    import pytz
    
    utc_now = datetime.datetime.now(pytz.UTC)
    local_now = datetime.datetime.now()
    
    print("üïê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏:")
    print(f"   UTC: {utc_now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"   –õ–æ–∫–∞–ª—å–Ω–æ–µ: {local_now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞ —Å UTC: {local_now.astimezone().utcoffset()}")

# === –í–´–ë–û–† –ê–ö–ö–ê–£–ù–¢–û–í ===

def select_card_type():
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (card_type, count)
    """
    print("\nüé¥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç:")
    print("1. üèµÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã")
    print("2. ‚öîÔ∏è –ë–æ–µ–≤—ã–µ –∫–∞—Ä—Ç—ã")
    print("3. üîÑ –û–±–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç")
    print("4. ‚ùå –û—Ç–º–µ–Ω–∞")
    
    while True:
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç (1-4): ").strip()
            
            if choice == "1":
                card_type = "collection"
                break
            elif choice == "2":
                card_type = "battle"
                break
            elif choice == "3":
                card_type = "both"
                break
            elif choice == "4":
                print("‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞")
                return None, 0
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4.")
        except KeyboardInterrupt:
            print("\n‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞")
            return None, 0
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
    while True:
        try:
            count_input = input(f"\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (1-100): ").strip()
            count = int(count_input)
            
            if 1 <= count <= 100:
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {card_type}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
                return card_type, count
            else:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            print("\n‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞")
            return None, 0

def select_accounts():
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–ª–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
    """
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)
        
        accounts = cfg["accounts"]
        
        if not accounts:
            print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return None
        
        print("\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        print("=" * 40)
        for i, acc in enumerate(accounts, 1):
            print(f"{i}. {acc['session']} ({acc.get('phone', 'N/A')})")
        print(f"{len(accounts) + 1}. üîÑ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        print(f"{len(accounts) + 2}. ‚ùå –û—Ç–º–µ–Ω–∞")
        
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç (1-{len(accounts) + 2}): ").strip()
                
                if choice == str(len(accounts) + 1):
                    print("üîÑ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
                    return None  # None –æ–∑–Ω–∞—á–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                elif choice == str(len(accounts) + 2):
                    print("‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞")
                    return []
                else:
                    choice_num = int(choice)
                    if 1 <= choice_num <= len(accounts):
                        selected_acc = accounts[choice_num - 1]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {selected_acc['session']} ({selected_acc.get('phone', 'N/A')})")
                        return [selected_acc]
                    else:
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(accounts) + 2}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                print("\n‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞")
                return []
                
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return None

async def run_cards_for_selected_accounts(selected_accounts=None, card_type="both", count=1):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    """
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)

        # API –∫–ª—é—á–∏ –±–µ—Ä–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
        api_id = API_ID
        api_hash = API_HASH
        bot = cfg.get("bot", "@YourTargetBot")
        concurrency = int(cfg.get("concurrency", 2))  # –º–∞–∫—Å–∏–º—É–º 2 –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –±–µ—Ä–µ–º –≤—Å–µ
        if selected_accounts is None:
            accounts = cfg["accounts"]
        else:
            accounts = selected_accounts
        
        if not accounts:
            print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return False

        print(f"üîê –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        print(f"‚ö° –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {concurrency}")
        print(f"üé¥ –¢–∏–ø –∫–∞—Ä—Ç: {card_type}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
        for i, acc in enumerate(accounts, 1):
            print(f"  {i}. {acc['session']} -> {acc.get('bot', bot)}")
        print()

        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è get_cards —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        async def get_cards_wrapper(client, bot_username):
            return await get_cards(client, bot_username, card_type, count)

        sema = asyncio.Semaphore(concurrency)
        tasks = [worker(acc, api_id, api_hash, bot, sema, get_cards_wrapper) for acc in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success_count = sum(1 for r in results if r is True)
        print(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return success_count > 0
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª accounts.json –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ README.md")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def run_scenario_for_selected_accounts(scenario_func, selected_accounts=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    –ï—Å–ª–∏ selected_accounts is None - –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    –ï—Å–ª–∏ selected_accounts is [] - –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∏—á–µ–≥–æ
    """
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)

        # API –∫–ª—é—á–∏ –±–µ—Ä–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
        api_id = API_ID
        api_hash = API_HASH
        bot = cfg.get("bot", "@YourTargetBot")
        concurrency = int(cfg.get("concurrency", 2))  # –º–∞–∫—Å–∏–º—É–º 2 –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –±–µ—Ä–µ–º –≤—Å–µ
        if selected_accounts is None:
            accounts = cfg["accounts"]
        else:
            accounts = selected_accounts
        
        if not accounts:
            print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return False

        print(f"üîê –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        print(f"‚ö° –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {concurrency}")
        for i, acc in enumerate(accounts, 1):
            print(f"  {i}. {acc['session']} -> {acc.get('bot', bot)}")
        print()

        sema = asyncio.Semaphore(concurrency)
        tasks = [worker(acc, api_id, api_hash, bot, sema, scenario_func) for acc in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success_count = sum(1 for r in results if r is True)
        print(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return success_count > 0
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª accounts.json –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ README.md")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

# === MAIN ===

async def main():
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    show_time_info()
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    import sys
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        
        if mode == "now":
            print("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ '—Å–µ–π—á–∞—Å' - –ø–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            await run_scenario_for_all_accounts(run_daily_rewards)
            return
        
        elif mode == "schedule":
            print("‚è∞ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ '–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫' - –∂–¥–µ–º 22:01 UTC")
            await wait_until_time(22, 1)
            await run_scenario_for_all_accounts(run_daily_rewards)
            return
        
        elif mode == "cards":
            print("üé¥ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ '–∫–∞—Ä—Ç—ã' - –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            await run_scenario_for_all_accounts(get_cards)
            return
        
        elif mode == "cards_schedule":
            print("‚è∞ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ '–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞—Ä—Ç' - –∂–¥–µ–º 4 —á–∞—Å–∞ 1 –º–∏–Ω—É—Ç—É")
            await wait_until_cards_time()
            await run_scenario_for_all_accounts(get_cards)
            return
        
        elif mode == "cards_loop":
            print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ '—Ü–∏–∫–ª –∫–∞—Ä—Ç' - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 1 –º–∏–Ω—É—Ç—É")
            await run_cards_loop()
            return
        
        elif mode == "test":
            print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É")
            try:
                with open("accounts.json", "r", encoding="utf-8") as f:
                    cfg = json.load(f)
                
                # API –∫–ª—é—á–∏ –±–µ—Ä–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
                api_id = API_ID
                api_hash = API_HASH
                bot = cfg.get("bot", "@YourTargetBot")
                accounts = cfg["accounts"]
                
                for acc in accounts:
                    client = TelegramClient(acc["session"], api_id, api_hash)
                    try:
                        print(f"üîê [{acc['session']}] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {acc.get('phone')}...")
                        await client.start(phone=acc.get("phone"))
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        try:
                            me = await client.get_me()
                            user_info = f"@{me.username}" if me.username else f"{me.first_name or ''} {me.last_name or ''}".strip()
                            if not user_info:
                                user_info = f"ID: {me.id}"
                            print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {user_info} ({acc.get('phone')})")
                        except:
                            print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ ({acc.get('phone')})")
                        
                        entity = await client.get_entity(acc.get("bot", bot))
                        await client.send_message(entity, "–ú–µ–Ω—é")
                        msg = await wait_new_from(client, entity, timeout=10)
                        print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        print(f"üì± [{acc['session']}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.raw_text[:100]}...")
                    except Exception as e:
                        print(f"‚ùå [{acc['session']}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {acc.get('phone')}: {e}")
                    finally:
                        await client.disconnect()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("ü§ñ Anicard Auto - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —Å–µ–π—á–∞—Å")
    print("2. üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã —Å–µ–π—á–∞—Å")
    print("3. üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª (–Ω–∞–≥—Ä–∞–¥—ã + –∫–∞—Ä—Ç—ã)")
    print("4. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç (–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ + –±–æ–µ–≤—ã–µ)")
    print("5. üé¥ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç")
    print("6. üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("7. üïê –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è")
    print("8. üëã –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-8): ").strip()
            
            if choice == "1":
                print("üéÅ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã —Å–µ–π—á–∞—Å...")
                # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                selected_accounts = select_accounts()
                if selected_accounts != []:  # –ù–µ –æ—Ç–º–µ–Ω–∞ (None = –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, [] = –æ—Ç–º–µ–Ω–∞)
                    await run_scenario_for_selected_accounts(run_daily_rewards, selected_accounts)
                break
            elif choice == "2":
                print("üé¥ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã —Å–µ–π—á–∞—Å...")
                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ä—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                card_type, count = select_card_type()
                if card_type is not None:  # –ù–µ –æ—Ç–º–µ–Ω–∞
                    # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    selected_accounts = select_accounts()
                    if selected_accounts != []:  # –ù–µ –æ—Ç–º–µ–Ω–∞ (None = –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, [] = –æ—Ç–º–µ–Ω–∞)
                        await run_cards_for_selected_accounts(selected_accounts, card_type, count)
                break
            elif choice == "3":
                print("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–Ω–∞–≥—Ä–∞–¥—ã + –∫–∞—Ä—Ç—ã)...")
                # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                selected_accounts = select_accounts()
                if selected_accounts != []:  # –ù–µ –æ—Ç–º–µ–Ω–∞ (None = –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, [] = –æ—Ç–º–µ–Ω–∞)
                    await run_continuous_loop(selected_accounts)
                break
            elif choice == "4":
                print("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç...")
                # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                selected_accounts = select_accounts()
                if selected_accounts != []:  # –ù–µ –æ—Ç–º–µ–Ω–∞ (None = –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, [] = –æ—Ç–º–µ–Ω–∞)
                    await show_cards_statistics(selected_accounts)
                break
            elif choice == "5":
                print("üé¥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã...")
                # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                selected_accounts = select_accounts()
                if selected_accounts != []:  # –ù–µ –æ—Ç–º–µ–Ω–∞ (None = –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, [] = –æ—Ç–º–µ–Ω–∞)
                    show_rare_cards(selected_accounts)
                break
            elif choice == "6":
                print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
                # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                selected_accounts = select_accounts()
                if selected_accounts != []:  # –ù–µ –æ—Ç–º–µ–Ω–∞ (None = –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, [] = –æ—Ç–º–µ–Ω–∞)
                    try:
                        with open("accounts.json", "r", encoding="utf-8") as f:
                            cfg = json.load(f)
                        
                        # API –∫–ª—é—á–∏ –±–µ—Ä–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
                        api_id = API_ID
                        api_hash = API_HASH
                        bot = cfg.get("bot", "@YourTargetBot")
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –±–µ—Ä–µ–º –≤—Å–µ
                        if selected_accounts is None:
                            accounts = cfg["accounts"]
                        else:
                            accounts = selected_accounts
                        
                        for acc in accounts:
                            client = TelegramClient(acc["session"], api_id, api_hash)
                            try:
                                print(f"üîê [{acc['session']}] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {acc.get('phone')}...")
                                await client.start(phone=acc.get("phone"))
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                                try:
                                    me = await client.get_me()
                                    user_info = f"@{me.username}" if me.username else f"{me.first_name or ''} {me.last_name or ''}".strip()
                                    if not user_info:
                                        user_info = f"ID: {me.id}"
                                    print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {user_info} ({acc.get('phone')})")
                                except:
                                    print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ ({acc.get('phone')})")
                                
                                entity = await client.get_entity(acc.get("bot", bot))
                                await client.send_message(entity, "–ú–µ–Ω—é")
                                msg = await wait_new_from(client, entity, timeout=10)
                                print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                                print(f"üì± [{acc['session']}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.raw_text[:100]}...")
                            except Exception as e:
                                print(f"‚ùå [{acc['session']}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {acc.get('phone')}: {e}")
                            finally:
                                await client.disconnect()
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                break
            elif choice == "7":
                print("üïê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è...")
                show_time_info()
                print()
                continue
            elif choice == "8":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3, 4, 5, 6, 7 –∏–ª–∏ 8.")
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break

if __name__ == "__main__":
    asyncio.run(main())