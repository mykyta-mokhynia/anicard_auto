import asyncio, json, os, random, re, datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError, SessionPasswordNeededError

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ .env
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
MESSAGE_TIMEOUT_MS = int(os.getenv("MESSAGE_TIMEOUT", "700"))  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
MESSAGE_TIMEOUT = MESSAGE_TIMEOUT_MS / 1000.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã (0.7 —Å–µ–∫—É–Ω–¥—ã)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞—Ä—Ç –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
CARDS_FOLDER = "accounts/cards"
if not os.path.exists(CARDS_FOLDER):
    os.makedirs(CARDS_FOLDER)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT, regex=None, contains=None):
    """
    –ñ–¥—ë–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç entity (–±–æ—Ç–∞).
    –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ (contains) –∏–ª–∏ regex.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ, –∫–≤–µ—Å—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    loop = asyncio.get_event_loop()
    fut = loop.create_future()

    @client.on(events.NewMessage(from_users=entity))
    async def handler(event):
        text = event.raw_text or ""
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if event.message.video:
            print(f"üé• [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        system_messages = [
            "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è",
            "–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞", 
            "–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞",
            "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞",
            "—Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞",
            "–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
        ]
        
        if any(sys_msg.lower() in text.lower() for sys_msg in system_messages):
            print(f"‚ÑπÔ∏è [{client.session.filename}] –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç "–∫–≤–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–º–∏—Å—Å–∏—è")
        quest_keywords = ["–∫–≤–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–º–∏—Å—Å–∏—è", "quest", "mission"]
        if any(keyword in text.lower() for keyword in quest_keywords):
            print(f"üìã [{client.session.filename}] –ö–≤–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (contains and contains.lower() in text.lower()) or \
           (regex and re.search(regex, text, re.I)) or \
           (not contains and not regex):
            if not fut.done():
                fut.set_result(event.message)

    try:
        return await asyncio.wait_for(fut, timeout=timeout)
    finally:
        client.remove_event_handler(handler)

async def click_button(msg, *, text=None, regex=None, index=None, case_insensitive=True):
    """
    –ö–ª–∏–∫ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:
    - text: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    - regex: —Ä–µ–≥—É–ª—è—Ä–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∏
    - index: –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (0..N-1), —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
    """
    if not msg or not msg.buttons:
        return False

    flat = [b for row in msg.buttons for b in row]

    if index is not None:
        if 0 <= index < len(flat):
            await flat[index].click()
            return True
        return False

    def norm(s): return (s or "") if not case_insensitive else (s or "").lower()
    for b in flat:
        bt = b.text or ""
        if text and norm(bt) == norm(text):
            await b.click(); return True
        if regex and re.search(regex, bt, re.I if case_insensitive else 0):
            await b.click(); return True
    return False

async def send_message_and_wait(client, entity, message, timeout=MESSAGE_TIMEOUT):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç
    """
    await client.send_message(entity, message)
    return await wait_new_from(client, entity, timeout=timeout)

async def click_button_and_wait(client, entity, msg, button_text=None, button_index=None, timeout=MESSAGE_TIMEOUT):
    """
    –ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏ –∂–¥–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        if button_text:
            clicked = await click_button(msg, text=button_text)
        elif button_index is not None:
            clicked = await click_button(msg, index=button_index)
        else:
            return None
        
        if clicked:
            try:
                return await wait_new_from(client, entity, timeout=timeout)
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    async for message in client.iter_messages(entity, limit=1):
                        return message
                except:
                    return None
        return None
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –≤ click_button_and_wait: {e}")
        return None

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–†–¢–ê–ú–ò ===

def load_rare_cards_filter():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        with open("rare_cards_filter.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get("cards", {})
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª rare_cards_filter.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ rare_cards_filter.json: {e}")
        return {}

def is_rare_card_by_name(card_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ä–µ–π—Ç–∏–Ω–≥) –∏–ª–∏ (None, None)
    """
    rare_cards = load_rare_cards_filter()
    
    if not rare_cards:
        return None, None
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    normalized_name = card_name.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–µ–¥–∫–æ—Å—Ç–∏
    for category, cards in rare_cards.items():
        for card in cards:
            if card.get("name", "").strip() == normalized_name:
                rating = card.get("strength", None)  # –ë–µ—Ä–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –ø–æ–ª—è strength
                return category, rating
    
    return None, None

def parse_card_response(text, card_type):
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, —Ç–∞–∫ –∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–µ –∏–ª–∏ None –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ —Ä–µ–¥–∫–∞—è
    """
    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
    card_info = {
        "type": card_type,
        "name": "",
        "universe": "",
        "element": "",
        "character": "",
        "rating": None,
        "rarity": None,
        "timestamp": datetime.datetime.now().isoformat()
    }
    
    # –î–ª—è –±–æ–µ–≤—ã—Ö –∫–∞—Ä—Ç
    if card_type == "battle":
        # –ò—â–µ–º –∏–º—è –∫–∞—Ä—Ç—ã
        name_match = re.search(r'üé¥ –ö–∞—Ä—Ç–∞: (.+)', text)
        if name_match:
            card_info["name"] = name_match.group(1).strip()
        
        # –ò—â–µ–º –≤—Å–µ–ª–µ–Ω–Ω—É—é
        universe_match = re.search(r'üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è: (.+)', text)
        if universe_match:
            card_info["universe"] = universe_match.group(1).strip()
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç/—Å—Ç–∏—Ö–∏—é
        element_match = re.search(r'–≠–ª–µ–º–µ–Ω—Ç: (.+)', text)
        if element_match:
            card_info["element"] = element_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç—ã (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç)
    rating_match = re.search(r'–†–µ–π—Ç–∏–Ω–≥: (\d+)', text)
    if rating_match:
        card_info["rating"] = int(rating_match.group(1))
    
    # –î–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
    elif card_type == "collection":
        # –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_match = re.search(r'üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: (.+)', text)
        if character_match:
            card_info["character"] = character_match.group(1).strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    card_name = card_info["name"] or card_info["character"]
    if not card_name:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    rarity_category, rating_from_list = is_rare_card_by_name(card_name)
    if rarity_category:
        card_info["rarity"] = rarity_category
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Å–ø–∏—Å–∫–∞, –∞ –Ω–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        card_info["rating"] = rating_from_list
        print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞: {card_name} ({rarity_category}, —Ä–µ–π—Ç–∏–Ω–≥: {rating_from_list})")
        return card_info
    
    # –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç
    return None

def save_card_to_file(session_name, card_info):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–æ–π –∫–∞—Ä—Ç–µ –≤ JSON —Ñ–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    file_path = os.path.join(CARDS_FOLDER, f"{session_name}.json")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except:
            data = {"epic": [], "legendary": [], "myfics": [], "adamant": []}
    else:
        data = {"epic": [], "legendary": [], "myfics": [], "adamant": []}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity = card_info["rarity"]
    category = rarity  # –¢–µ–ø–µ—Ä—å rarity —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if category not in data:
        data[category] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã
    card_name = card_info["name"] or card_info["character"]
    for existing_card in data[category]:
        if existing_card.get("name") == card_name:
            print(f"üîÑ [{session_name}] –ö–∞—Ä—Ç–∞ {card_name} —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ({category})")
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –∏–º—è, —ç–ª–µ–º–µ–Ω—Ç, —Ä–µ–π—Ç–∏–Ω–≥)
    card_entry = {
        "name": card_name,
        "rating": card_info["rating"]
    }
    
    if card_info["element"]:
        card_entry["element"] = card_info["element"]
    
    data[category].append(card_entry)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ [{session_name}] –†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {card_name} ({category})")

def send_card_notification(session_name, card_info):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–¥–∫–æ–π –∫–∞—Ä—Ç—ã
    """
    rarity_emoji = {
        "epic": "üü¢",
        "legendary": "üåü",
        "myfics": "‚ú®", 
        "adamant": "üíé"
    }
    
    type_emoji = {
        "battle": "‚öîÔ∏è",
        "collection": "üé≠"
    }
    
    emoji = rarity_emoji.get(card_info["rarity"], "üé¥")
    type_icon = type_emoji.get(card_info["type"], "üé¥")
    
    print(f"\nüéâ {emoji} –†–ï–î–ö–ê–Ø –ö–ê–†–¢–ê! {emoji}")
    print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {session_name}")
    print(f"üîÆ –†–µ–¥–∫–æ—Å—Ç—å: {card_info['rarity']} {emoji}")
    print(f"üìã –¢–∏–ø: {type_icon} {'–ë–æ–µ–≤–∞—è' if card_info['type'] == 'battle' else '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è'}")
    
    card_name = card_info["name"] or card_info["character"]
    if card_name:
        print(f"üé¥ –ù–∞–∑–≤–∞–Ω–∏–µ: {card_name}")
    if card_info.get("rating"):
        print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {card_info['rating']}")
    if card_info["universe"]:
        print(f"üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è: {card_info['universe']}")
    if card_info["element"]:
        print(f"üçÉ –≠–ª–µ–º–µ–Ω—Ç: {card_info['element']}")
    
    print("=" * 50)

async def filter_rare_card(client, entity, card_info):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç
    """
    try:
        print(f"üîç [{client.session.filename}] –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–¥–∫—É—é –∫–∞—Ä—Ç—É: {card_info['name']} (–†–µ–π—Ç–∏–Ω–≥: {card_info['rating']})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ú–æ–∏ –∫–∞—Ä—Ç—ã"
        print(f"üß≥ [{client.session.filename}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º '–ú–æ–∏ –∫–∞—Ä—Ç—ã'...")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await send_message_and_wait(client, entity, "üß≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã")
        
        if msg and msg.buttons:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–≤–∞–Ω–∏–µ ‚ûï"
            cards_button = None
            for button_text in [b.text for row in msg.buttons for b in row]:
                if "–ù–∞–∑–≤–∞–Ω–∏–µ ‚ûï" in button_text:
                    cards_button = button_text
                    break
            
            if cards_button:
                print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {cards_button}")
                msg = await click_button_and_wait(client, entity, msg, button_text=cards_button)
                
                if msg and "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã" in msg.raw_text:
                    print(f"üìù [{client.session.filename}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card_info['name']}")
                    await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    msg = await send_message_and_wait(client, entity, card_info['name'])
                    
                    if msg and "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ä—Ç" in msg.raw_text:
                        print(f"üéõÔ∏è [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...")
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ä—Ç—ã
                        success = await set_card_filters(client, entity, card_info['name'], card_info['type'])
                        if success:
                            print(f"‚úÖ [{client.session.filename}] –§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {card_info['name']}")
                        else:
                            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {card_info['name']}")
                    else:
                        print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                else:
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã")
            else:
                print(f"‚ÑπÔ∏è [{client.session.filename}] –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–≤–∞–Ω–∏–µ ‚ûï' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ '–ú–æ–∏ –∫–∞—Ä—Ç—ã'")
            
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {e}")

async def set_card_filters(client, entity, card_name, card_type):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ä—Ç
    """
    try:
        print(f"üéõÔ∏è [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è {card_name}...")
        
        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç - –ë–æ–µ–≤—ã–µ ‚öîÔ∏è –∏–ª–∏ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ üé≠
        if card_type == "battle":
            print(f"‚öîÔ∏è [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç: –ë–æ–µ–≤—ã–µ ‚öîÔ∏è")
            await client.send_message(entity, "–ë–æ–µ–≤—ã–µ ‚öîÔ∏è")
        else:
            print(f"üé≠ [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç: –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ üé≠")
            await client.send_message(entity, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ üé≠")
        
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        print(f"üìù [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card_name}")
        await client.send_message(entity, card_name)
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í—Å–µ–ª–µ–Ω–Ω—ã–µ - ‚úñÔ∏è
        print(f"üåç [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í—Å–µ–ª–µ–Ω–Ω—ã–µ: ‚úñÔ∏è")
        await client.send_message(entity, "‚úñÔ∏è")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –†–µ–¥–∫–æ—Å—Ç–∏ - ‚úñÔ∏è
        print(f"‚≠ê [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –†–µ–¥–∫–æ—Å—Ç–∏: ‚úñÔ∏è")
        await client.send_message(entity, "‚úñÔ∏è")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –°—Ç–∏—Ö–∏–∏ - ‚úñÔ∏è
        print(f"üî• [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –°—Ç–∏—Ö–∏–∏: ‚úñÔ∏è")
        await client.send_message(entity, "‚úñÔ∏è")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –°–Ω–∞—á–∞–ª–∞ - –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–ø–µ—Ä—ë–¥
        print(f"üìä [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–ø–µ—Ä—ë–¥")
        await client.send_message(entity, "–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–ø–µ—Ä—ë–¥")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –ü–æ—Ç–æ–º - –ù–æ–≤—ã–µ –≤–ø–µ—Ä—ë–¥
        print(f"üìä [{client.session.filename}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: –ù–æ–≤—ã–µ –≤–ø–µ—Ä—ë–¥")
        await client.send_message(entity, "–ù–æ–≤—ã–µ –≤–ø–µ—Ä—ë–¥")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
        
        # 8. –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞—Ä—Ç—ã ‚è©"
        if msg and msg.buttons:
            cards_button = None
            for button_text in [b.text for row in msg.buttons for b in row]:
                if "–ö–∞—Ä—Ç—ã ‚è©" in button_text:
                    cards_button = button_text
                    break
            
            if cards_button:
                print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {cards_button}")
                msg = await click_button_and_wait(client, entity, msg, button_text=cards_button)
                
                if msg and "–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç" in msg.raw_text:
                    print(f"‚úÖ [{client.session.filename}] –§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                    return False
            else:
                print(f"‚ÑπÔ∏è [{client.session.filename}] –ö–Ω–æ–ø–∫–∞ '–ö–∞—Ä—Ç—ã ‚è©' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        else:
            print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return False

async def use_attempts(client, entity, attempts, card_type):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
    """
    command = "‚öîÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É" if card_type == "battle" else "üèµÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É"
    emoji = "‚öîÔ∏è" if card_type == "battle" else "üé≠"
    
    print(f"{emoji} [{client.session.filename}] –ò—Å–ø–æ–ª—å–∑—É–µ–º {attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {card_type} –∫–∞—Ä—Ç...")
    
    for i in range(attempts):
        try:
            print(f"{emoji} [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{attempts}...")
            await client.send_message(entity, command)
            await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            
            try:
                reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
                if reply and reply.raw_text:
                    card_info = parse_card_response(reply.raw_text, card_type)
                    if card_info:
                        # –ö–∞—Ä—Ç–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ parse_card_response –∏ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–¥–∫–æ–π
                        save_card_to_file(client.session.filename, card_info)
                        send_card_notification(client.session.filename, card_info)
                        print(f"üéâ [{client.session.filename}] –†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞: {card_info['name']} ({card_info['rarity']})")
                    else:
                        print(f"üìù [{client.session.filename}] –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
                            
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
            
            if i < attempts - 1:
                await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
        except Exception as e:
            print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {i+1}: {e}")

# === –û–°–ù–û–í–ù–û–ô –ï–ñ–ï–î–ù–ï–í–ù–´–ô –¶–ò–ö–õ ===

async def daily_cycle_for_account(client, bot_username):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        entity = await client.get_entity(bot_username)
        
        print(f"üéØ [{client.session.filename}] –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        await asyncio.sleep(random.uniform(0.1, 0.3))

        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ú–µ–Ω—é"
        print(f"üìú [{client.session.filename}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º '–ú–µ–Ω—é'...")
        msg = await send_message_and_wait(client, entity, "üìú –ú–µ–Ω—é")
        print(f"‚úÖ [{client.session.filename}] –ú–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–æ")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

        # 2. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É üé´ AniPass
        print(f"üé´ [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º 'AniPass'...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É AniPass
        anipass_clicked = False
        if msg.buttons:
            flat_buttons = [b for row in msg.buttons for b in row]
            for button in flat_buttons:
                if "AniPass" in button.text or "üé´" in button.text:
                    print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button.text}")
                    await button.click()
                    anipass_clicked = True
                    break
        
        if not anipass_clicked:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É AniPass")
            return False
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        try:
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] AniPass –æ—Ç–∫—Ä—ã—Ç")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ AniPass, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                async for message in client.iter_messages(entity, limit=1):
                    msg = message
                    break
            except:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å –≥–∞–ª–æ—á–∫–æ–π ‚úîÔ∏è (AniPass –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–±—Ä–∞–Ω)
        print(f"üîç [{client.session.filename}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AniPass...")
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –≥–∞–ª–æ—á–∫–æ–π ‚úîÔ∏è (—Ç–æ–ª—å–∫–æ —ç—Ç—É)
            checkmark_button = None
            for button_text in button_texts:
                if "‚úîÔ∏è" in button_text:
                    checkmark_button = button_text
                    break
            
            if checkmark_button:
                print(f"‚úîÔ∏è [{client.session.filename}] AniPass –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –≥–∞–ª–æ—á–∫–æ–π...")
                msg = await click_button_and_wait(client, entity, msg, button_text=checkmark_button)
                if not msg:
                    print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å –≥–∞–ª–æ—á–∫–æ–π")
                    return False
                print(f"‚úÖ [{client.session.filename}] AniPass –ø–æ–ª—É—á–µ–Ω!")
                
                # 4. –ù–∞–∂–∏–º–∞–µ–º "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è AniPass
                print(f"üîô [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º '–ù–∞–∑–∞–¥'...")
                msg = await click_button_and_wait(client, entity, msg, button_text="–ù–∞–∑–∞–¥ üîô")
                if not msg:
                    print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'")
                    return False
                print(f"‚úÖ [{client.session.filename}] –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            else:
                print(f"‚ÑπÔ∏è [{client.session.filename}] AniPass —É–∂–µ –∑–∞–±—Ä–∞–Ω –∑–∞ –¥–µ–Ω—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                # –ï—Å–ª–∏ AniPass —É–∂–µ –∑–∞–±—Ä–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                print(f"üîô [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º '–ù–∞–∑–∞–¥'...")
                msg = await click_button_and_wait(client, entity, msg, button_text="–ù–∞–∑–∞–¥ üîô")
                if not msg:
                    print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'")
                    return False
                print(f"‚úÖ [{client.session.filename}] –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        else:
            print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ AniPass, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–±—Ä–∞–Ω")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            print(f"üîô [{client.session.filename}] –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            await client.send_message(entity, "üìú –ú–µ–Ω—é")
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        # 5. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ "–î–∞—Ä—ã –±–æ–≥–æ–≤"
        print(f"‚õ© [{client.session.filename}] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ '–î–∞—Ä—ã –±–æ–≥–æ–≤'...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–î–∞—Ä—ã –±–æ–≥–æ–≤"
        gods_gifts_clicked = False
        if msg.buttons:
            flat_buttons = [b for row in msg.buttons for b in row]
            for button in flat_buttons:
                if "–î–∞—Ä—ã –±–æ–≥–æ–≤" in button.text or "‚õ©" in button.text:
                    print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button.text}")
                    await button.click()
                    gods_gifts_clicked = True
                    break
        
        if not gods_gifts_clicked:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '–î–∞—Ä—ã –±–æ–≥–æ–≤'")
            return False
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        try:
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] –í '–î–∞—Ä—ã –±–æ–≥–æ–≤'")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ '–î–∞—Ä—ã –±–æ–≥–æ–≤', –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            try:
                async for message in client.iter_messages(entity, limit=1):
                    msg = message
                    break
            except:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False

        # 6. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ)
        print(f"üéÅ [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã...")
        
        # –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
        print(f"üÄÑÔ∏è [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω...")
        await click_button(msg, index=2)  # 3-—è –∫–Ω–æ–ø–∫–∞
        try:
            reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            if "—Å–µ–Ω—Ç" in reply.raw_text or "2025" in reply.raw_text or "–¥–æ—Å—Ç—É–ø–Ω" in reply.raw_text.lower():
                print(f"‚ÑπÔ∏è [{client.session.filename}] –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω —É–∂–µ –ø–æ–ª—É—á–µ–Ω")
            else:
                print(f"‚úÖ [{client.session.filename}] –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂–µ—Ç–æ–Ω –ø–æ–ª—É—á–µ–Ω")
                if reply.buttons:
                    msg = reply
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–µ—Ç–æ–Ω–∞")

        await asyncio.sleep(MESSAGE_TIMEOUT)

        # –î—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
        print(f"üé≤ [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º –¥—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏...")
        await click_button(msg, index=0)  # 1-—è –∫–Ω–æ–ø–∫–∞
        try:
            reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            if "—Å–µ–Ω—Ç" in reply.raw_text or "2025" in reply.raw_text or "–¥–æ—Å—Ç—É–ø–Ω" in reply.raw_text.lower():
                print(f"‚ÑπÔ∏è [{client.session.filename}] –î—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω")
            else:
                print(f"‚úÖ [{client.session.filename}] –î—Ä–µ–≤–Ω–∏–π –∫—É–± —É–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω")
                if reply.buttons:
                    msg = reply
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
                attempts_match = re.search(r'–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ‚öîÔ∏è (\d+) –ø–æ–ø—ã—Ç–æ–∫', reply.raw_text)
                if attempts_match:
                    battle_attempts = int(attempts_match.group(1))
                    print(f"üéØ [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω–æ {battle_attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–µ–≤—ã—Ö –∫–∞—Ä—Ç!")
                    await use_attempts(client, entity, battle_attempts, "battle")
                
                collection_attempts_match = re.search(r'–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ üé≠ (\d+) –ø–æ–ø—ã—Ç–æ–∫', reply.raw_text)
                if collection_attempts_match:
                    collection_attempts = int(collection_attempts_match.group(1))
                    print(f"üéØ [{client.session.filename}] –ü–æ–ª—É—á–µ–Ω–æ {collection_attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç!")
                    await use_attempts(client, entity, collection_attempts, "collection")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É–±–∞ —É–¥–∞—á–∏")

        await asyncio.sleep(MESSAGE_TIMEOUT)

        # –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
        print(f"üìØ [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º —Ä–æ–≥ –ø—Ä–∏–∑—ã–≤–∞...")
        await click_button(msg, index=1)  # 2-—è –∫–Ω–æ–ø–∫–∞
        try:
            reply = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            if "—Å–µ–Ω—Ç" in reply.raw_text or "2025" in reply.raw_text or "–¥–æ—Å—Ç—É–ø–Ω" in reply.raw_text.lower():
                print(f"‚ÑπÔ∏è [{client.session.filename}] –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω")
            else:
                print(f"‚úÖ [{client.session.filename}] –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ –ø–æ–ª—É—á–µ–Ω")
                # –†–æ–≥ –ø—Ä–∏–∑—ã–≤–∞ –≤—Å–µ–≥–¥–∞ –¥–∞–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
                card_info = parse_card_response(reply.raw_text, "collection")
                if card_info:
                    card_info["rarity"] = "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"
                    card_info["type"] = "collection"
                    save_card_to_file(client.session.filename, card_info)
                    send_card_notification(client.session.filename, card_info)
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–≥–∞ –ø—Ä–∏–∑—ã–≤–∞")

        # 7. –ù–∞–∂–∏–º–∞–µ–º "–ù–∞–∑–∞–¥"
        print(f"üîô [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º '–ù–∞–∑–∞–¥'...")
        msg = await click_button_and_wait(client, entity, msg, button_text="–ù–∞–∑–∞–¥ üîô")
        if not msg:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'")
            return False
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

        # 8. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ "–ö—Ä–∞—Ñ—Ç –º–µ–Ω—é"
        print(f"üß¨ [{client.session.filename}] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ '–ö—Ä–∞—Ñ—Ç –º–µ–Ω—é'...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ö—Ä–∞—Ñ—Ç –º–µ–Ω—é"
        craft_clicked = False
        if msg.buttons:
            flat_buttons = [b for row in msg.buttons for b in row]
            for button in flat_buttons:
                if "–ö—Ä–∞—Ñ—Ç –º–µ–Ω—é" in button.text or "üß¨" in button.text:
                    print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button.text}")
                    await button.click()
                    craft_clicked = True
                    break
        
        if not craft_clicked:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '–ö—Ä–∞—Ñ—Ç –º–µ–Ω—é'")
            return False
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        try:
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] –í '–ö—Ä–∞—Ñ—Ç –º–µ–Ω—é'")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ '–ö—Ä–∞—Ñ—Ç –º–µ–Ω—é', –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            try:
                async for message in client.iter_messages(entity, limit=1):
                    msg = message
                    break
            except:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

        # 9. –ù–∞–∂–∏–º–∞–µ–º "–û–º—É—Ç –¥—É—à"
        print(f"üåä [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º '–û–º—É—Ç –¥—É—à'...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–û–º—É—Ç –¥—É—à"
        soul_clicked = False
        if msg.buttons:
            flat_buttons = [b for row in msg.buttons for b in row]
            for button in flat_buttons:
                if "ü™û –û–º—É—Ç –¥—É—à" in button.text or "–û–º—É—Ç –¥—É—à" in button.text or "–¥—É—à" in button.text.lower():
                    print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button.text}")
                    await button.click()
                    soul_clicked = True
                    break
        
        if not soul_clicked:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '–û–º—É—Ç –¥—É—à'")
            return False
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        try:
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] –í '–û–º—É—Ç –¥—É—à'")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ '–û–º—É—Ç –¥—É—à', –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            try:
                async for message in client.iter_messages(entity, limit=1):
                    msg = message
                    break
            except:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False

        # 10. –ù–∞–∂–∏–º–∞–µ–º "–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ —ç—Å—Å–µ–Ω—Ü–∏–∏/–ø—Ä–æ–µ–∫—Ü–∏–∏ –¥—É—à"
        print(f"üíé [{client.session.filename}] –ü–æ–∂–µ—Ä—Ç–≤—É–µ–º –≤—Å–µ —ç—Å—Å–µ–Ω—Ü–∏–∏...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
        donate_clicked = False
        if msg.buttons:
            flat_buttons = [b for row in msg.buttons for b in row]
            for button in flat_buttons:
                if "–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ —ç—Å—Å–µ–Ω—Ü–∏–∏/–ø—Ä–æ–µ–∫—Ü–∏–∏ –¥—É—à" in button.text or "üîò" in button.text:
                    print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button.text}")
                    await button.click()
                    donate_clicked = True
                    break
        
        if not donate_clicked:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        try:
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] –≠—Å—Å–µ–Ω—Ü–∏–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω—ã")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            try:
                async for message in client.iter_messages(entity, limit=1):
                    msg = message
                    break
            except:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

        # 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "üõ° –ú–æ–π –∫–ª–∞–Ω"
        print(f"üõ° [{client.session.filename}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–Ω...")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        msg = await send_message_and_wait(client, entity, "üõ° –ú–æ–π –∫–ª–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∞–Ω
        if "–Ω–µ—Ç –∫–ª–∞–Ω–∞" in msg.raw_text.lower() or "—É –≤–∞—Å –Ω–µ—Ç –∫–ª–∞–Ω–∞" in msg.raw_text.lower():
            print(f"‚ÑπÔ∏è [{client.session.filename}] –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∫–ª–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É")
        else:
            print(f"üè∞ [{client.session.filename}] –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –∫–ª–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É...")
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã
            if msg.buttons:
                button_texts = [b.text for row in msg.buttons for b in row]
                print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã
                treasure_button = None
                for button_text in button_texts:
                    if "—Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞" in button_text.lower() or "treasure" in button_text.lower():
                        treasure_button = button_text
                        break
                
                if treasure_button:
                    print(f"üí∞ [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º '{treasure_button}'...")
                    msg = await click_button_and_wait(client, entity, msg, button_text=treasure_button)
                    if msg and "üí∞ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ üí∞" in msg.raw_text:
                        print(f"‚úÖ [{client.session.filename}] –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É"
                        if msg.buttons:
                            button_texts = [b.text for row in msg.buttons for b in row]
                            if "–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É" in button_texts:
                                print(f"üí∏ [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–ª–∞—Ç—É...")
                                msg = await click_button_and_wait(client, entity, msg, button_text="–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É")
                                if msg:
                                    print(f"‚úÖ [{client.session.filename}] –í—ã–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                            else:
                                print(f"‚ÑπÔ∏è [{client.session.filename}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç")
                else:
                    print(f"‚ÑπÔ∏è [{client.session.filename}] –ö–Ω–æ–ø–∫–∞ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # 12. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "üõç –ú–∞–≥–∞–∑–∏–Ω"
        print(f"üõç [{client.session.filename}] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–∞–≥–∞–∑–∏–Ω...")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        msg = await send_message_and_wait(client, entity, "üõç –ú–∞–≥–∞–∑–∏–Ω")
        print(f"‚úÖ [{client.session.filename}] –í –º–∞–≥–∞–∑–∏–Ω–µ")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

        # 13. –ù–∞–∂–∏–º–∞–µ–º "–∫—Ä—É—Ç–∫–∏ –∑–∞ BattleCoin"
        print(f"üé∞ [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º '–∫—Ä—É—Ç–∫–∏ –∑–∞ BattleCoin'...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∫—Ä—É—Ç–æ–∫
        spin_clicked = False
        if msg.buttons:
            flat_buttons = [b for row in msg.buttons for b in row]
            for button in flat_buttons:
                if "–ö—Ä—É—Ç–∫–∏ –∑–∞ BattleCoin" in button.text or "üéñÔ∏è" in button.text:
                    print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button.text}")
                    await button.click()
                    spin_clicked = True
                    break
        
        if not spin_clicked:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '–∫—Ä—É—Ç–∫–∏ –∑–∞ BattleCoin'")
            return False
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        try:
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] –í –∫—Ä—É—Ç–∫–∞—Ö –∑–∞ BattleCoin")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫—Ä—É—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            try:
                async for message in client.iter_messages(entity, limit=1):
                    msg = message
                    break
            except:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False

        # 14. –ù–∞–∂–∏–º–∞–µ–º "10 ‚öîÔ∏è"
        print(f"‚öîÔ∏è [{client.session.filename}] –ù–∞–∂–∏–º–∞–µ–º '10 ‚öîÔ∏è'...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if msg.buttons:
            button_texts = [b.text for row in msg.buttons for b in row]
            print(f"üìã [{client.session.filename}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {button_texts}")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "10 ‚öîÔ∏è"
        ten_clicked = False
        if msg.buttons:
            flat_buttons = [b for row in msg.buttons for b in row]
            for button in flat_buttons:
                if "10 ‚öîÔ∏è" in button.text or "10" in button.text and "‚öîÔ∏è" in button.text:
                    print(f"üéØ [{client.session.filename}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button.text}")
                    await button.click()
                    ten_clicked = True
                    break
        
        if not ten_clicked:
            print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '10 ‚öîÔ∏è'")
            return False
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        try:
            msg = await wait_new_from(client, entity, timeout=MESSAGE_TIMEOUT)
            print(f"‚úÖ [{client.session.filename}] –ö—Ä—É—Ç–∫–∏ –∑–∞ BattleCoin –ø–æ–ª—É—á–µ–Ω—ã")
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è [{client.session.filename}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—Ä—É—Ç–æ–∫, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            try:
                async for message in client.iter_messages(entity, limit=1):
                    msg = message
                    break
            except:
                print(f"‚ùå [{client.session.filename}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False

        # 15. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "üéí –ü—Ä–æ—Ñ–∏–ª—å"
        print(f"üéí [{client.session.filename}] –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        msg = await send_message_and_wait(client, entity, "üéí –ü—Ä–æ—Ñ–∏–ª—å")
        print(f"‚úÖ [{client.session.filename}] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω")
        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

        # 16. –¢—Ä–∞—Ç–∏–º –ø–æ–ø—ã—Ç–∫–∏
        print(f"üéØ [{client.session.filename}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏...")
        profile_text = msg.raw_text
        
        # –ò—â–µ–º –ø–æ–ø—ã—Ç–∫–∏
        attempts_match = re.search(r'–ü–æ–ø—ã—Ç–∫–∏:\s*¬∑\s*‚öîÔ∏è\s*-\s*(\d+)\s*\|\s*üé≠\s*-\s*(\d+)', profile_text)
        if attempts_match:
            battle_attempts = int(attempts_match.group(1))
            collection_attempts = int(attempts_match.group(2))
            
            print(f"üìä [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∏: ‚öîÔ∏è {battle_attempts} | üé≠ {collection_attempts}")
            
            if battle_attempts > 0:
                await use_attempts(client, entity, battle_attempts, "battle")
            
            if collection_attempts > 0:
                await use_attempts(client, entity, collection_attempts, "collection")
        else:
            print(f"‚ÑπÔ∏è [{client.session.filename}] –ü–æ–ø—ã—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ")

        await asyncio.sleep(MESSAGE_TIMEOUT)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        print(f"üéâ [{client.session.filename}] –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå [{client.session.filename}] –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        print(f"üîç [{client.session.filename}] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        print(f"üìã [{client.session.filename}] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return False

# === –†–ê–ë–û–¢–ù–ò–ö –ù–ê –û–î–ò–ù –ê–ö–ö–ê–£–ù–¢ ===

async def worker(acc, api_id, api_hash, bot, sema):
    """
    –†–∞–±–æ—Ç–Ω–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency
    """
    session = acc["session"]
    phone = acc.get("phone")
    
    client = TelegramClient(session, api_id, api_hash)

    async with sema:   # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        async with client:
            try:
                print(f"üîê [{session}] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {phone}...")
                
                await client.start(phone=phone)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    me = await client.get_me()
                    user_info = f"@{me.username}" if me.username else f"{me.first_name or ''} {me.last_name or ''}".strip()
                    if not user_info:
                        user_info = f"ID: {me.id}"
                    print(f"‚úÖ [{session}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {user_info} ({phone})")
                except:
                    print(f"‚úÖ [{session}] –ü–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ ({phone})")
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
                await asyncio.sleep(random.uniform(0.1, 0.5))
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª
                result = await daily_cycle_for_account(client, acc.get("bot", bot))
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(random.uniform(0.1, 0.3))
                
                return result
                
            except SessionPasswordNeededError:
                print(f"‚ùå [{session}] –ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è {phone}")
                return False
            except FloodWaitError as e:
                print(f"‚è∞ [{session}] FloodWait –¥–ª—è {phone}: –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫.")
                return False
            except Exception as e:
                print(f"‚ùå [{session}] –û—à–∏–±–∫–∞ –¥–ª—è {phone}: {e}")
                return False

# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def run_daily_cycle():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    """
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)

        api_id = API_ID
        api_hash = API_HASH
        bot = cfg.get("bot", "@YourTargetBot")
        concurrency = 2  # –ú–∞–∫—Å–∏–º—É–º 2 –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        accounts = cfg["accounts"]

        print(f"üîê –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        print(f"‚ö° –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {concurrency}")
        print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: {MESSAGE_TIMEOUT_MS} –º—Å")
        for i, acc in enumerate(accounts, 1):
            print(f"  {i}. {acc['session']} -> {acc.get('bot', bot)}")
        print()

        sema = asyncio.Semaphore(concurrency)
        tasks = [worker(acc, api_id, api_hash, bot, sema) for acc in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success_count = sum(1 for r in results if r is True)
        print(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return success_count > 0
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def wait_until_time(target_hour=22, target_minute=1):
    """
    –ñ–¥–µ–º –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ UTC (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22:01 UTC)
    """
    import pytz
    
    utc_now = datetime.datetime.now(pytz.UTC)
    target_time_utc = utc_now.replace(hour=target_hour, minute=target_minute, second=0, microsecond=0)
    
    if utc_now >= target_time_utc:
        target_time_utc += datetime.timedelta(days=1)
    
    wait_seconds = (target_time_utc - utc_now).total_seconds()
    
    local_tz = datetime.datetime.now().astimezone().tzinfo
    target_local = target_time_utc.astimezone(local_tz)
    
    print(f"‚è∞ –ñ–¥–µ–º –¥–æ {target_time_utc.strftime('%H:%M UTC')} ({target_local.strftime('%H:%M –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')})")
    print(f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ ({wait_seconds/3600:.1f} —á–∞—Å–æ–≤)")
    
    await asyncio.sleep(wait_seconds)
    print("‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ! –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª...")

def show_time_info():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    """
    import pytz
    
    utc_now = datetime.datetime.now(pytz.UTC)
    local_now = datetime.datetime.now()
    
    print("üïê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏:")
    print(f"   UTC: {utc_now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"   –õ–æ–∫–∞–ª—å–Ω–æ–µ: {local_now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞ —Å UTC: {local_now.astimezone().utcoffset()}")

# === MAIN ===

async def main():
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    show_time_info()
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    import sys
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        
        if mode == "now":
            print("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            await run_daily_cycle()
            return
        
        elif mode == "schedule":
            print("‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (22:01 UTC)")
            await wait_until_time(22, 1)
            await run_daily_cycle()
            return
        
        elif mode == "test":
            print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            try:
                with open("accounts.json", "r", encoding="utf-8") as f:
                    cfg = json.load(f)
                
                api_id = API_ID
                api_hash = API_HASH
                bot = cfg.get("bot", "@YourTargetBot")
                accounts = cfg["accounts"]
                
                for acc in accounts:
                    client = TelegramClient(acc["session"], api_id, api_hash)
                    try:
                        print(f"üîê [{acc['session']}] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {acc.get('phone')}...")
                        await client.start(phone=acc.get("phone"))
                        
                        me = await client.get_me()
                        user_info = f"@{me.username}" if me.username else f"{me.first_name or ''} {me.last_name or ''}".strip()
                        if not user_info:
                            user_info = f"ID: {me.id}"
                        print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {user_info} ({acc.get('phone')})")
                        
                        entity = await client.get_entity(acc.get("bot", bot))
                        await client.send_message(entity, "üìú –ú–µ–Ω—é")
                        msg = await wait_new_from(client, entity, timeout=10)
                        print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        print(f"üì± [{acc['session']}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.raw_text[:100]}...")
                    except Exception as e:
                        print(f"‚ùå [{acc['session']}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {acc.get('phone')}: {e}")
                    finally:
                        await client.disconnect()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("ü§ñ Anicard Daily Cycle - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–µ–π—á–∞—Å")
    print("2. ‚è∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (22:01 UTC)")
    print("3. üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("4. üïê –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è")
    print("5. üëã –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
            
            if choice == "1":
                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª...")
                await run_daily_cycle()
                break
            elif choice == "2":
                print("‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
                await wait_until_time(22, 1)
                await run_daily_cycle()
                break
            elif choice == "3":
                print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
                try:
                    with open("accounts.json", "r", encoding="utf-8") as f:
                        cfg = json.load(f)
                    
                    api_id = API_ID
                    api_hash = API_HASH
                    bot = cfg.get("bot", "@YourTargetBot")
                    accounts = cfg["accounts"]
                    
                    for acc in accounts:
                        client = TelegramClient(acc["session"], api_id, api_hash)
                        try:
                            print(f"üîê [{acc['session']}] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {acc.get('phone')}...")
                            await client.start(phone=acc.get("phone"))
                            
                            me = await client.get_me()
                            user_info = f"@{me.username}" if me.username else f"{me.first_name or ''} {me.last_name or ''}".strip()
                            if not user_info:
                                user_info = f"ID: {me.id}"
                            print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {user_info} ({acc.get('phone')})")
                            
                            entity = await client.get_entity(acc.get("bot", bot))
                            await client.send_message(entity, "üìú –ú–µ–Ω—é")
                            msg = await wait_new_from(client, entity, timeout=10)
                            print(f"‚úÖ [{acc['session']}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                            print(f"üì± [{acc['session']}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.raw_text[:100]}...")
                        except Exception as e:
                            print(f"‚ùå [{acc['session']}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {acc.get('phone')}: {e}")
                        finally:
                            await client.disconnect()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                break
            elif choice == "4":
                print("üïê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è...")
                show_time_info()
                print()
                continue
            elif choice == "5":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3, 4 –∏–ª–∏ 5.")
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break

if __name__ == "__main__":
    asyncio.run(main())
