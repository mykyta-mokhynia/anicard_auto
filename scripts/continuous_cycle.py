#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Anicard Continuous Cycle - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª
–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –≤ 22:01 UTC –∏ —Ü–∏–∫–ª –∫–∞—Ä—Ç –∫–∞–∂–¥—ã–µ 4—á 10—Å
"""

import asyncio
import json
import os
import sys
import time
from datetime import datetime, timedelta
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parent_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ combined_cycle
try:
    from combined_cycle import run_daily_cycle, run_card_cycle
except ImportError:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
    current_dir = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, current_dir)
    from combined_cycle import run_daily_cycle, run_card_cycle

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–æ–≤
cycle_lock = asyncio.Lock()

async def wait_until_daily_time():
    """
    –ñ–¥–µ—Ç –¥–æ 22:01 UTC
    """
    utc = pytz.UTC
    now = datetime.now(utc)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è 22:01 UTC –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    target_time = now.replace(hour=22, minute=1, second=0, microsecond=0)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if now >= target_time:
        target_time += timedelta(days=1)
    
    wait_seconds = (target_time - now).total_seconds()
    
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {now.strftime('%H:%M:%S')}")
    print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –≤: {target_time.strftime('%H:%M:%S UTC')}")
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {wait_seconds/3600:.1f} —á–∞—Å–æ–≤")
    
    await asyncio.sleep(wait_seconds)

async def continuous_cycle():
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤ 22:01 UTC + –∫–∞—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ Anicard Auto")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    daily_task = asyncio.create_task(daily_cycle_scheduler())
    card_task = asyncio.create_task(card_cycle_scheduler())
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
        await asyncio.gather(daily_task, card_task)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        daily_task.cancel()
        card_task.cancel()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

async def daily_cycle_scheduler():
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (22:01 UTC)
    """
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if cycle_lock.locked():
                print(f"‚è≥ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(60)  # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É
                continue
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            async with cycle_lock:
                print(f"\nüåÖ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
                await run_daily_cycle()
                print(f"‚úÖ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 22:01 UTC
            print(f"‚è∞ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            await wait_until_daily_time()
            
        except asyncio.CancelledError:
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            print("‚è∞ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

async def card_cycle_scheduler():
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥)
    """
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if cycle_lock.locked():
                print(f"‚è≥ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –¶–∏–∫–ª –∫–∞—Ä—Ç –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(60)  # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É
                continue
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∫–∞—Ä—Ç —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            async with cycle_lock:
                print(f"\nüé¥ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç...")
                await run_card_cycle()
                print(f"‚úÖ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –¶–∏–∫–ª –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –ñ–¥–µ–º 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
            print(f"‚è∞ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç (4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥)...")
            await asyncio.sleep(4 * 3600 + 10)  # 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
            
        except asyncio.CancelledError:
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∫–∞—Ä—Ç: {e}")
            print("‚è∞ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

async def card_cycle_only():
    """
    –¢–æ–ª—å–∫–æ —Ü–∏–∫–ª –∫–∞—Ä—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
    """
    print("üé¥ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥")
    print("=" * 50)
    
    while True:
        try:
            print(f"\nüé¥ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç...")
            await run_card_cycle()
            
            # –ñ–¥–µ–º 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
            wait_time = 4 * 60 * 60 + 10  # 4 —á–∞—Å–∞ 10 —Å–µ–∫—É–Ω–¥
            print(f"\n‚è∞ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ –∫–∞—Ä—Ç...")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∫–∞—Ä—Ç: {e}")
            print("‚è∞ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

async def daily_cycle_only():
    """
    –¢–æ–ª—å–∫–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª –≤ 22:01 UTC
    """
    print("üåÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ 22:01 UTC")
    print("=" * 50)
    
    while True:
        try:
            # –ñ–¥–µ–º –¥–æ 22:01 UTC
            await wait_until_daily_time()
            
            print(f"\nüåÖ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            await run_daily_cycle()
            
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            print("‚è∞ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    if len(sys.argv) > 1:
        if sys.argv[1] == "continuous":
            await continuous_cycle()
        elif sys.argv[1] == "cards":
            await card_cycle_only()
        elif sys.argv[1] == "daily":
            await daily_cycle_only()
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python continuous_cycle.py [continuous|cards|daily]")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª
        print("‚ôæÔ∏è –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        await continuous_cycle()

if __name__ == "__main__":
    asyncio.run(main())
