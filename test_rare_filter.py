#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.append('scripts')

def load_rare_cards_filter():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        file_path = "rare_cards_filter.json"
        if not os.path.exists(file_path):
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            file_path = os.path.join("..", "rare_cards_filter.json")
        
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get("cards", {})
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª rare_cards_filter.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ rare_cards_filter.json: {e}")
        return {}

def is_rare_card_by_name(card_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ä–µ–π—Ç–∏–Ω–≥) –∏–ª–∏ (None, None)
    """
    rare_cards = load_rare_cards_filter()
    
    if not rare_cards:
        return None, None
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    normalized_name = card_name.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–µ–¥–∫–æ—Å—Ç–∏
    for category, cards in rare_cards.items():
        for card in cards:
            if card.get("name", "").strip() == normalized_name:
                rating = card.get("strength", None)
                return category, rating
    
    return None, None

def test_card_filter():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    test_messages = [
        {
            "text": """ü™™ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –±–æ–µ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞

–†–µ–¥–∫–æ—Å—Ç—å: –≠–ø–∏—á–µ—Å–∫–∞—è üü¢
–≠–ª–µ–º–µ–Ω—Ç: –î–µ—Ä–µ–≤–æ üçÉ

üé¥ –ö–∞—Ä—Ç–∞: –•–∞–Ω–∞–º–∏
üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è: –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞

–°–º–æ—Ç—Ä–∏ –∞–Ω–∏–º–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º (https://t.me/anilibria_bot?start=anicardplaybot) –≤ –æ–∑–≤—É—á–∫–µ AniLibria""",
            "expected": None  # –•–∞–Ω–∞–º–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
        },
        {
            "text": """ü™™ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –±–æ–µ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞

–†–µ–¥–∫–æ—Å—Ç—å: –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è üü°
–≠–ª–µ–º–µ–Ω—Ç: –û–≥–æ–Ω—å üî•

üé¥ –ö–∞—Ä—Ç–∞: –ò—Ç–∞—á–∏ –£—á–∏—Ö–∞
üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è: –ù–∞—Ä—É—Ç–æ

–°–º–æ—Ç—Ä–∏ –∞–Ω–∏–º–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º (https://t.me/anilibria_bot?start=anicardplaybot) –≤ –æ–∑–≤—É—á–∫–µ AniLibria""",
            "expected": "epic"  # –ò—Ç–∞—á–∏ –£—á–∏—Ö–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ epic
        },
        {
            "text": """ü™™ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –±–æ–µ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞

–†–µ–¥–∫–æ—Å—Ç—å: –û–±—ã—á–Ω–∞—è üîµ
–≠–ª–µ–º–µ–Ω—Ç: –í–æ–¥–∞ üíß

üé¥ –ö–∞—Ä—Ç–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ö–∞—Ä—Ç–∞
üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è: –¢–µ—Å—Ç–æ–≤–∞—è

–°–º–æ—Ç—Ä–∏ –∞–Ω–∏–º–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º (https://t.me/anilibria_bot?start=anicardplaybot) –≤ –æ–∑–≤—É—á–∫–µ AniLibria""",
            "expected": None
        }
    ]
    
    for i, test_case in enumerate(test_messages, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}:")
        text = test_case["text"]
        expected = test_case["expected"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥
        import re
        name_match = re.search(r'üé¥ –ö–∞—Ä—Ç–∞: (.+)', text)
        rating_match = re.search(r'–†–µ–π—Ç–∏–Ω–≥: (\d+)', text)
        element_match = re.search(r'–≠–ª–µ–º–µ–Ω—Ç: (.+)', text)
        
        if name_match:
            card_name = name_match.group(1).strip()
            print(f"üé¥ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card_name}")
            
            if rating_match:
                rating = int(rating_match.group(1))
                print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}")
            
            if element_match:
                element = element_match.group(1).strip()
                print(f"üçÉ –≠–ª–µ–º–µ–Ω—Ç: {element}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            result = is_rare_card_by_name(card_name)
            if result and len(result) == 2:
                rarity, rating = result
            else:
                rarity, rating = None, None
                
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {rarity}")
            if rating:
                print(f"üìä –†–µ–π—Ç–∏–Ω–≥ –∏–∑ —Å–ø–∏—Å–∫–∞: {rating}")
            print(f"‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected}")
            
            if rarity == expected:
                print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
            else:
                print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã")
    
    print("\n" + "=" * 50)
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    test_card_filter()
